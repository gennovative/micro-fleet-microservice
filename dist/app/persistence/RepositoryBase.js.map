{"version":3,"sources":["app/persistence/RepositoryBase.ts"],"names":[],"mappings":";;;;;;;;;AAEA,0CAAuC;AAavC;IAGC,YAAsB,YAAwB;QAAxB,iBAAY,GAAZ,YAAY,CAAY;QAC7C,aAAK,CAAC,aAAa,CAAC,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACtD,IAAI,CAAC,cAAc,EAAE,CAAC;IACvB,CAAC;IAEY,QAAQ;;YACpB,IAAI,KAAK,GAAG,MAAW,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAE/C,+EAA+E;YAC/E,oBAAoB;YACrB,MAAM,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QACpB,CAAC;KAAA;IAEY,MAAM,CAAC,KAAa;;YAChC,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC3B,CAAC;KAAA;IAEY,MAAM,CAAC,EAAU;;YAC7B,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YACrD,MAAM,CAAC,YAAY,CAAC;QACrB,CAAC;KAAA;IAEY,IAAI,CAAC,EAAU;;YAC3B,IAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC7B,CAAC;KAAA;IAEY,KAAK,CAAC,KAAsB;;YACxC,aAAK,CAAC,aAAa,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;YAC3C,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAS,KAAK,CAAC,CAAC;YACjF,MAAM,CAAC,YAAY,CAAC;QACrB,CAAC;KAAA;IAEY,IAAI,CAAC,SAAiB,EAAE,QAAgB;;YACpD,IAAI,SAAS,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;YAC7D,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC9B,CAAC;KAAA;IAEY,MAAM,CAAC,KAAa;;YAChC,aAAK,CAAC,aAAa,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;YAC3C,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC1E,MAAM,CAAC,YAAY,CAAC;QACrB,CAAC;KAAA;CAMD;AApDD,wCAoDC","file":"RepositoryBase.js","sourcesContent":["import { QueryBuilder } from 'objection';\r\nimport { EntityBase } from '../persistence/EntityBase';\r\nimport { Guard } from '../utils/Guard';\r\n\r\n\r\nexport interface IRepository<TModel extends IModelDTO> {\r\n\tcountAll(): Promise<number>;\r\n\tcreate(model: TModel): Promise<TModel>;\r\n\tdelete(id: number): Promise<number>;\r\n\tfind(id: number): Promise<TModel>;\r\n\tpage(pageIndex: number, pageSize: number): Promise<TModel[]>;\r\n\tpatch(model: Partial<TModel>): Promise<number>;\r\n\tupdate(model: TModel): Promise<number>;\r\n}\r\n\r\nexport abstract class RepositoryBase<TEntity extends EntityBase, TModel extends IModelDTO>\r\n\t\t\timplements IRepository<TModel> {\r\n\r\n\tconstructor(protected _modelMapper: AutoMapper) {\r\n\t\tGuard.assertDefined('modelMapper', this._modelMapper);\r\n\t\tthis.createModelMap();\r\n\t}\r\n\r\n\tpublic async countAll(): Promise<number> {\r\n\t\tlet count = await <any>this.query().count('id');\r\n\t\t\r\n\t\t // In case with Postgres, `count` returns a bigint type which will be a String \r\n\t\t // and not a Number.\r\n\t\treturn (count * 1);\r\n\t}\r\n\r\n\tpublic async create(model: TModel): Promise<TModel> {\r\n\t\tlet newEnt = await this.query().insert(model);\r\n\t\treturn this.toDTO(newEnt);\r\n\t}\r\n\r\n\tpublic async delete(id: number): Promise<number> {\r\n\t\tlet affectedRows = await this.query().deleteById(id);\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\tpublic async find(id: number): Promise<TModel> {\r\n\t\tlet foundEnt = await this.query().findById(id);\r\n\t\treturn this.toDTO(foundEnt);\r\n\t}\r\n\r\n\tpublic async patch(model: Partial<TModel>): Promise<number> {\r\n\t\tGuard.assertDefined('entity.id', model.id);\r\n\t\tlet affectedRows = await this.query().where('id', model.id).patch(<TModel>model);\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\tpublic async page(pageIndex: number, pageSize: number): Promise<TModel[]> {\r\n\t\tlet foundList = await this.query().page(pageIndex, pageSize);\r\n\t\treturn this.toDTO(foundList);\r\n\t}\r\n\r\n\tpublic async update(model: TModel): Promise<number> {\r\n\t\tGuard.assertDefined('entity.id', model.id);\r\n\t\tlet affectedRows = await this.query().where('id', model.id).update(model);\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\tprotected abstract query(): QueryBuilder<TEntity>;\r\n\tprotected abstract createModelMap(): void;\r\n\tprotected abstract toEntity(from: TModel | TModel[]): TEntity & TEntity[];\r\n\tprotected abstract toDTO(from: TEntity | TEntity[]): TModel & TModel[];\r\n}"]}