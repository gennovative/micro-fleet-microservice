{"version":3,"sources":["app/addons/MediateRpcHandlerAddOnBase.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yEAAgE;AAEhE,+DAAiE;AAMjE;;GAEG;AAEH,IAAsB,0BAA0B,GAAhD;IAIC,YACW,eAAuC,EACvC,WAA+B;QAD/B,oBAAe,GAAf,eAAe,CAAwB;QACvC,gBAAW,GAAX,WAAW,CAAoB;QAEzC,4BAAK,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;QAC3D,4BAAK,CAAC,gBAAgB,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IACpD,CAAC;IAGD;;OAEG;IACI,IAAI;QACV,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,0CAAC,CAAC,YAAY,CAAC,CAAC;QACjE,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;IACjC,CAAC;IAED;;OAEG;IACI,UAAU;QAChB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,OAAO;QACb,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAGS,cAAc;QACvB,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACxD,CAAC;CACD,CAAA;AA5CqB,0BAA0B;IAD/C,iCAAU,EAAE;;GACS,0BAA0B,CA4C/C;AA5CqB,gEAA0B","file":"MediateRpcHandlerAddOnBase.js","sourcesContent":["import { SvcSettingKeys as S } from 'back-lib-common-constants';\r\nimport { IMediateRpcHandler, Types as ComT } from 'back-lib-service-communication';\r\nimport { inject, injectable, Guard } from 'back-lib-common-util';\r\n\r\nimport { IConfigurationProvider } from './ConfigurationProvider';\r\nimport { Types as T } from '../constants/Types';\r\n\r\n\r\n/**\r\n * Base class for MediateRpcAddOn.\r\n */\r\n@injectable()\r\nexport abstract class MediateRpcHandlerAddOnBase implements IServiceAddOn {\r\n\r\n\tprotected abstract controllerIdentifier: string | symbol;\r\n\r\n\tconstructor(\r\n\t\tprotected _configProvider: IConfigurationProvider,\r\n\t\tprotected _rpcHandler: IMediateRpcHandler\r\n\t) {\r\n\t\tGuard.assertArgDefined('_configProvider', _configProvider);\r\n\t\tGuard.assertArgDefined('_rpcHandler', _rpcHandler);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.init\r\n\t */\r\n\tpublic init(): Promise<void> {\r\n\t\tthis._rpcHandler.name = this._configProvider.get(S.SERVICE_SLUG);\r\n\t\tthis._rpcHandler.init();\r\n\t\tthis.handleRequests();\r\n\t\treturn this._rpcHandler.start();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.deadLetter\r\n\t */\r\n\tpublic deadLetter(): Promise<void> {\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.dispose\r\n\t */\r\n\tpublic dispose(): Promise<void> {\r\n\t\tthis._configProvider = null;\r\n\t\tlet handler = this._rpcHandler;\r\n\t\tthis._rpcHandler = null;\r\n\t\treturn handler.dispose();\r\n\t}\r\n\r\n\r\n\tprotected handleRequests(): void {\r\n\t\tthis._rpcHandler.handleCRUD(this.controllerIdentifier);\r\n\t}\r\n}"]}