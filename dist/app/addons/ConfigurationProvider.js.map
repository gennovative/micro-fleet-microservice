{"version":3,"sources":["app/addons/ConfigurationProvider.ts"],"names":[],"mappings":"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","file":"ConfigurationProvider.js","sourcesContent":["import { GetSettingRequest } from 'back-lib-common-contracts';\r\nimport { inject, injectable } from 'back-lib-common-util';\r\nimport { IDirectRpcCaller, IRpcResponse, Types as ComT } from 'back-lib-service-communication';\r\n\r\nimport { SettingKeys as S } from '../constants/SettingKeys';\r\nimport { Types as T } from '../constants/Types';\r\n\r\nexport interface IConfigurationProvider extends IServiceAddOn {\r\n\tenableRemote: boolean;\r\n\tget(key: string): string;\r\n\tfetch(): Promise<boolean>;\r\n}\r\n\r\n/**\r\n * Provides settings from package\r\n */\r\n@injectable()\r\nexport class ConfigurationProvider implements IConfigurationProvider {\r\n\tprivate _configFilePath = `${process.cwd()}/appconfig.json`;\r\n\tprivate _fileSettings;\r\n\tprivate _remoteSettings;\r\n\tprivate _enableRemote: boolean;\r\n\r\n\tconstructor(\r\n\t\t@inject(ComT.DIRECT_RPC_CALLER) private _rpcCaller: IDirectRpcCaller\r\n\t) {\r\n\t\tthis._remoteSettings = {};\r\n\t\tthis._enableRemote = false;\r\n\t\tif (this._rpcCaller) {\r\n\t\t\tthis._rpcCaller.name = 'ConfigurationProvider';\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get enableRemote(): boolean {\r\n\t\treturn this._enableRemote;\r\n\t}\r\n\r\n\tpublic set enableRemote(value: boolean) {\r\n\t\tthis._enableRemote = value;\r\n\t}\r\n\r\n\tpublic init(): Promise<void> {\r\n\t\treturn new Promise<void>(resolve => {\r\n\t\t\ttry {\r\n\t\t\t\tthis._fileSettings = require(this._configFilePath);\r\n\t\t\t} catch (ex) {\r\n\t\t\t\tthis._fileSettings = {};\r\n\t\t\t}\r\n\t\t\tresolve();\r\n\t\t});\r\n\t}\r\n\r\n\tpublic dispose(): Promise<void> {\r\n\t\treturn new Promise<void>(resolve => {\r\n\t\t\tthis._configFilePath = null;\r\n\t\t\tthis._fileSettings = null;\r\n\t\t\tthis._remoteSettings = null;\r\n\t\t\tthis._enableRemote = null;\r\n\t\t\tthis._rpcCaller = null;\r\n\t\t\tresolve();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to get settings from cached Configuration Service, environmetal variable,\r\n\t * and `appconfig.json` file, respectedly.\r\n\t */\r\n\tpublic get(key: string): string {\r\n\t\tlet value = (this._remoteSettings[key] || process.env[key] || this._fileSettings[key]);\r\n\t\treturn (value ? value : null);\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to fetch settings from remote Configuration Service.\r\n\t */\r\n\tpublic async fetch(): Promise<boolean> { // TODO: Should be privately called.\r\n\t\tlet addressRaw = this.get(S.CONFIG_SERVICE_ADDRESSES);\r\n\r\n\t\tif (!addressRaw || !addressRaw.length) { throw 'No address for Configuration Service!'; }\r\n\r\n\t\tlet addressList: string[] = addressRaw.split(';'),\r\n\t\t\ti = 0;\r\n\t\tfor (; i < addressList.length; i++) {\r\n\t\t\tif (await this.attemptFetch(addressList[i])) {\r\n\t\t\t\t// Stop trying if success\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow 'Cannot connect to any address of Configuration Service!';\r\n\t}\r\n\r\n\r\n\tprivate async attemptFetch(address: string): Promise<boolean> {\r\n\r\n\t\ttry {\r\n\t\t\tlet serviceName = this.get(S.SERVICE_NAME),\r\n\t\t\t\tipAddress = ''; // If this service runs inside a Docker container, \r\n\t\t\t\t\t\t\t\t// this should be the host's IP address.\r\n\r\n\t\t\tthis._rpcCaller.baseAddress = address;\r\n\t\t\tlet req = new GetSettingRequest();\r\n\t\t\treq.slug = serviceName;\r\n\t\t\treq.ipAddress = ipAddress;\r\n\r\n\t\t\tlet res: IRpcResponse = await this._rpcCaller.call('SettingService', 'getSetting', req);\r\n\t\t\tif (res.isSuccess) {\r\n\t\t\t\tthis._remoteSettings = res.data;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.warn(err);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}"]}