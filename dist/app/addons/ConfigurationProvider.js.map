{"version":3,"sources":["app/addons/ConfigurationProvider.ts"],"names":[],"mappings":"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","file":"ConfigurationProvider.js","sourcesContent":["import { EventEmitter } from 'events';\r\n\r\nimport { SvcSettingKeys as S } from 'back-lib-common-constants';\r\nimport { GetSettingRequest, SettingItem, SettingItemDataType,\r\n\tIConfigurationProvider } from 'back-lib-common-contracts';\r\nimport { inject, injectable, Guard, CriticalException } from 'back-lib-common-util';\r\nimport { IDirectRpcCaller, IRpcResponse, Types as ComT } from 'back-lib-service-communication';\r\n\r\n\r\n/**\r\n * Provides settings from appconfig.json, environmental variables and remote settings service.\r\n */\r\n@injectable()\r\nexport class ConfigurationProvider\r\n\t\timplements IConfigurationProvider {\r\n\tprivate _addresses: string[];\r\n\tprivate _configFilePath;\r\n\tprivate _enableRemote: boolean;\r\n\tprivate _eventEmitter: EventEmitter;\r\n\tprivate _fileSettings;\r\n\tprivate _remoteSettings;\r\n\tprivate _refetchTimer: NodeJS.Timer;\r\n\tprivate _refetchInterval: number;\r\n\tprivate _isInit: boolean;\r\n\r\n\tconstructor(\r\n\t\t@inject(ComT.DIRECT_RPC_CALLER) private _rpcCaller: IDirectRpcCaller\r\n\t) {\r\n\t\tGuard.assertArgDefined('_rpcCaller', _rpcCaller);\r\n\r\n\t\tthis._configFilePath = `${process.cwd()}/appconfig.json`;\r\n\t\tthis._remoteSettings = this._fileSettings = {};\r\n\t\tthis._enableRemote = false;\r\n\t\tthis._eventEmitter = new EventEmitter();\r\n\t\tthis._rpcCaller.name = 'ConfigurationProvider';\r\n\t\tthis._isInit = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IConfigurationProvider.enableRemote\r\n\t */\r\n\tpublic get enableRemote(): boolean {\r\n\t\treturn this._enableRemote;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IConfigurationProvider.enableRemote\r\n\t */\r\n\tpublic set enableRemote(val: boolean) {\r\n\t\tthis._enableRemote = val;\r\n\t}\r\n\r\n\r\n\tprivate get refetchInterval(): number {\r\n\t\treturn this._refetchInterval;\r\n\t}\r\n\r\n\tprivate set refetchInterval(val: number) {\r\n\t\tthis._refetchInterval = val;\r\n\t\tif (this._refetchTimer) {\r\n\t\t\tthis.stopRefetch();\r\n\t\t\tthis.repeatFetch();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.init\r\n\t */\r\n\tpublic init(): Promise<void> {\r\n\t\tif (this._isInit) {\r\n\t\t\treturn Promise.resolve();\r\n\t\t}\r\n\t\tthis._isInit = true;\r\n\r\n\t\ttry {\r\n\t\t\tthis._fileSettings = require(this._configFilePath);\r\n\t\t} catch (ex) {\r\n\t\t\tconsole.warn(ex);\r\n\t\t\tthis._fileSettings = {};\r\n\t\t}\r\n\r\n\t\tif (this.enableRemote) {\r\n\t\t\tlet addresses = this.applySettings();\r\n\t\t\tif (!addresses) {\r\n\t\t\t\treturn Promise.reject(new CriticalException('No address for Settings Service!'));\r\n\t\t\t}\r\n\t\t\tthis._addresses = addresses;\r\n\t\t}\r\n\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @see IServiceAddOn.deadLetter\r\n\t */\r\n\tpublic deadLetter(): Promise<void> {\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.dispose\r\n\t */\r\n\tpublic dispose(): Promise<void> {\r\n\t\tthis.stopRefetch();\r\n\t\tthis._configFilePath = null;\r\n\t\tthis._fileSettings = null;\r\n\t\tthis._remoteSettings = null;\r\n\t\tthis._enableRemote = null;\r\n\t\tthis._rpcCaller = null;\r\n\t\tthis._eventEmitter = null;\r\n\t\tthis._isInit = null;\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IConfigurationProvider.get\r\n\t */\r\n\tpublic get(key: string, dataType?: SettingItemDataType): number & boolean & string {\r\n\t\tlet value = this._remoteSettings[key];\r\n\t\tif (value === undefined && dataType) {\r\n\t\t\tvalue = this.parseValue(process.env[key] || this._fileSettings[key], dataType);\r\n\t\t} else if (value === undefined) {\r\n\t\t\tvalue = process.env[key] || this._fileSettings[key];\r\n\t\t}\r\n\t\treturn (value ? value : null);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IConfigurationProvider.fetch\r\n\t */\r\n\tpublic async fetch(): Promise<boolean> { // TODO: Should be privately called.\r\n\t\tlet addresses: string[] = this._addresses,\r\n\t\t\toldSettings = this._remoteSettings;\r\n\r\n\t\tfor (let addr of addresses) {\r\n\t\t\tif (await this.attemptFetch(addr)) {\r\n\t\t\t\t// Move this address onto top of list\r\n\t\t\t\tlet pos = addresses.indexOf(addr);\r\n\t\t\t\tif (pos != 0) {\r\n\t\t\t\t\taddresses.splice(pos, 1);\r\n\t\t\t\t\taddresses.unshift(addr);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.broadCastChanges(oldSettings, this._remoteSettings);\r\n\t\t\t\tif (this._refetchTimer === undefined) {\r\n\t\t\t\t\tthis.updateSelf();\r\n\t\t\t\t\tthis.repeatFetch();\r\n\t\t\t\t}\r\n\t\t\t\t// Stop trying if success\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Don't throw error on refetching\r\n\t\tif (this._refetchTimer === undefined) {\r\n\t\t\tthrow new CriticalException('Cannot connect to any address of Configuration Service!');\r\n\t\t}\r\n\t}\r\n\r\n\tpublic onUpdate(listener: (changedKeys: string[]) => void): void {\r\n\t\tthis._eventEmitter.on('updated', listener);\r\n\t}\r\n\r\n\tprivate applySettings(): string[] {\r\n\t\tthis.refetchInterval = this.get(S.SETTINGS_REFETCH_INTERVAL) || (5 * 60000); // Default 5 mins\r\n\t\ttry {\r\n\t\t\tlet addresses: string[] = JSON.parse(this.get(S.SETTINGS_SERVICE_ADDRESSES));\r\n\t\t\treturn (addresses && addresses.length) ? addresses : null;\r\n\t\t} catch (err) {\r\n\t\t\tconsole.warn(err);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateSelf(): void {\r\n\t\tthis._eventEmitter.prependListener('updated', (changedKeys: string[]) => {\r\n\t\t\tif (changedKeys.includes(S.SETTINGS_REFETCH_INTERVAL) || changedKeys.includes(S.SETTINGS_SERVICE_ADDRESSES)) {\r\n\t\t\t\tlet addresses = this.applySettings();\r\n\t\t\t\tif (addresses) {\r\n\t\t\t\t\tthis._addresses = addresses;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn('New SettingService addresses are useless!');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate repeatFetch(): void {\r\n\t\tthis._refetchTimer = setInterval(() => this.fetch(), this.refetchInterval);\r\n\t}\r\n\r\n\tprivate stopRefetch(): void {\r\n\t\tclearInterval(this._refetchTimer);\r\n\t\tthis._refetchTimer = null;\r\n\t}\r\n\r\n\r\n\tprivate async attemptFetch(address: string): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tlet serviceName = this.get(S.SERVICE_SLUG),\r\n\t\t\t\tipAddress = '0.0.0.0'; // If this service runs inside a Docker container, \r\n\t\t\t\t\t\t\t\t// this should be the host's IP address.\r\n\r\n\t\t\tthis._rpcCaller.baseAddress = address;\r\n\t\t\tlet req = GetSettingRequest.translator.whole({\r\n\t\t\t\tslug: serviceName,\r\n\t\t\t\tipAddress\r\n\t\t\t});\r\n\r\n\t\t\tlet res: IRpcResponse = await this._rpcCaller.call('SettingService', 'getSetting', req);\r\n\t\t\tif (res.isSuccess) {\r\n\t\t\t\tthis._remoteSettings = this.parseSettings(res.payload);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.warn(err);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate broadCastChanges(oldSettings, newSettings): void {\r\n\t\tif (!newSettings) { return; }\r\n\t\tlet oldKeys = Object.getOwnPropertyNames(oldSettings),\r\n\t\t\tnewKeys = Object.getOwnPropertyNames(newSettings),\r\n\t\t\tchangedKeys: string[] = [],\r\n\t\t\tval;\r\n\r\n\t\t// Update existing values or add new keys\r\n\t\tfor (let key of newKeys) {\r\n\t\t\tval = newSettings[key];\r\n\t\t\tif (val !== oldSettings[key]) {\r\n\t\t\t\tchangedKeys.push(key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Reset abandoned keys.\r\n\t\tfor (let key of oldKeys) {\r\n\t\t\tif (!newKeys.includes(key)) {\r\n\t\t\t\tchangedKeys.push(key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (changedKeys.length) {\r\n\t\t\tthis._eventEmitter.emit('updated', changedKeys);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseSettings(raw) {\r\n\t\tif (!raw) { return {}; }\r\n\r\n\t\tlet map = {},\r\n\t\t\tsettings: SettingItem[] = SettingItem.translator.whole(raw);\r\n\t\tfor (let st of settings) {\r\n\t\t\tmap[st.name] = this.parseValue(st.value, st.dataType);\r\n\t\t}\r\n\t\treturn map;\r\n\t}\r\n\r\n\tprivate parseValue(val, type) {\r\n\t\tif (val === undefined) { return null; }\r\n\r\n\t\tif (type == SettingItemDataType.String) {\r\n\t\t\treturn val;\r\n\t\t} else {\r\n\t\t\treturn JSON.parse(val);\r\n\t\t}\r\n\t}\r\n}"]}