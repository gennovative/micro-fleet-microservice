{"version":3,"sources":["app/addons/ConfigurationProvider.ts"],"names":[],"mappings":"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","file":"ConfigurationProvider.js","sourcesContent":["import { GetSettingRequest, SettingItem, SettingItemDataType } from 'back-lib-common-contracts';\r\nimport { inject, injectable, Guard, CriticalException } from 'back-lib-common-util';\r\nimport { IDirectRpcCaller, IRpcResponse, Types as ComT } from 'back-lib-service-communication';\r\n\r\nimport { SettingKeys as S } from '../constants/SettingKeys';\r\nimport { Types as T } from '../constants/Types';\r\n\r\nexport interface IConfigurationProvider extends IServiceAddOn {\r\n\tenableRemote: boolean;\r\n\tget(key: string): number & boolean & string;\r\n\tfetch(): Promise<boolean>;\r\n}\r\n\r\n/**\r\n * Provides settings from appconfig.json, environmental variables and remote settings service.\r\n */\r\n@injectable()\r\nexport class ConfigurationProvider implements IConfigurationProvider {\r\n\tprivate _configFilePath = `${process.cwd()}/appconfig.json`;\r\n\tprivate _fileSettings;\r\n\tprivate _remoteSettings;\r\n\tprivate _enableRemote: boolean;\r\n\r\n\tconstructor(\r\n\t\t@inject(ComT.DIRECT_RPC_CALLER) private _rpcCaller: IDirectRpcCaller\r\n\t) {\r\n\t\tGuard.assertArgDefined('_rpcCaller', _rpcCaller);\r\n\r\n\t\tthis._remoteSettings = {};\r\n\t\tthis._enableRemote = false;\r\n\t\tthis._rpcCaller.name = 'ConfigurationProvider';\r\n\t}\r\n\r\n\tpublic get enableRemote(): boolean {\r\n\t\treturn this._enableRemote;\r\n\t}\r\n\r\n\tpublic set enableRemote(value: boolean) {\r\n\t\tthis._enableRemote = value;\r\n\t}\r\n\r\n\tpublic init(): Promise<void> {\r\n\t\treturn new Promise<void>(resolve => {\r\n\t\t\ttry {\r\n\t\t\t\tthis._fileSettings = require(this._configFilePath);\r\n\t\t\t} catch (ex) {\r\n\t\t\t\tthis._fileSettings = {};\r\n\t\t\t}\r\n\t\t\tresolve();\r\n\t\t});\r\n\t}\r\n\r\n\tpublic dispose(): Promise<void> {\r\n\t\treturn new Promise<void>(resolve => {\r\n\t\t\tthis._configFilePath = null;\r\n\t\t\tthis._fileSettings = null;\r\n\t\t\tthis._remoteSettings = null;\r\n\t\t\tthis._enableRemote = null;\r\n\t\t\tthis._rpcCaller = null;\r\n\t\t\tresolve();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to get settings from cached Configuration Service, environmetal variable,\r\n\t * and `appconfig.json` file, respectedly.\r\n\t */\r\n\tpublic get(key: string): number & boolean & string {\r\n\t\tlet value = (this._remoteSettings[key] || process.env[key] || this._fileSettings[key]);\r\n\t\treturn (value ? value : null);\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to fetch settings from remote Configuration Service.\r\n\t */\r\n\tpublic async fetch(): Promise<boolean> { // TODO: Should be privately called.\r\n\t\tlet addresses: string[] = JSON.parse(this.get(S.SETTINGS_SERVICE_ADDRESSES));\r\n\r\n\t\tif (!addresses || !addresses.length) { throw new CriticalException('No address for Configuration Service!'); }\r\n\r\n\t\tfor (let addr of addresses) {\r\n\t\t\tif (await this.attemptFetch(addr)) {\r\n\t\t\t\t// Stop trying if success\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow new CriticalException('Cannot connect to any address of Configuration Service!');\r\n\t}\r\n\r\n\r\n\tprivate async attemptFetch(address: string): Promise<boolean> {\r\n\r\n\t\ttry {\r\n\t\t\tlet serviceName = this.get(S.SERVICE_SLUG),\r\n\t\t\t\tipAddress = ''; // If this service runs inside a Docker container, \r\n\t\t\t\t\t\t\t\t// this should be the host's IP address.\r\n\r\n\t\t\tthis._rpcCaller.baseAddress = address;\r\n\t\t\tlet req = new GetSettingRequest();\r\n\t\t\treq.slug = serviceName;\r\n\t\t\treq.ipAddress = ipAddress;\r\n\r\n\t\t\tlet res: IRpcResponse = await this._rpcCaller.call('SettingService', 'getSetting', req);\r\n\t\t\tif (res.isSuccess) {\r\n\t\t\t\tthis._remoteSettings = this.parseSettings(res.data);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.warn(err);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate parseSettings(raw) {\r\n\t\tlet map = {},\r\n\t\t\tsettings: SettingItem[] = SettingItem.translator.whole(raw);\r\n\t\tfor (let st of settings) {\r\n\t\t\tmap[st.name] = this.parseValue(st.value, st.dataType);\r\n\t\t}\r\n\t\treturn map;\r\n\t}\r\n\r\n\tprivate parseValue(val, type) {\r\n\t\tif (type == SettingItemDataType.Number) {\r\n\t\t\treturn parseFloat(val);\r\n\t\t} else if (type == SettingItemDataType.Boolean) {\r\n\t\t\t// val = 'true' | 'false'; (lowercase)\r\n\t\t\treturn JSON.parse(val);\r\n\t\t}\r\n\t\treturn val; // string data type\r\n\t}\r\n}"]}