{"version":3,"sources":["app/controllers/InternalControllerBase.ts"],"names":[],"mappings":"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","file":"InternalControllerBase.js","sourcesContent":["import { ISoftDelRepository, JoiModelValidator, ModelAutoMapper } from 'back-lib-common-contracts';\r\nimport { injectable, unmanaged } from 'back-lib-common-util';\r\nimport { IdProvider } from 'back-lib-id-generator';\r\nimport { IRpcRequest } from 'back-lib-service-communication';\r\n\r\n\r\n@injectable()\r\nexport abstract class InternalControllerBase<TModel extends IModelDTO> {\r\n\tconstructor(\r\n\t\t@unmanaged() protected _ClassDTO?: Newable,\r\n\t\t@unmanaged() protected _repo?: ISoftDelRepository<TModel, any, any>,\r\n\t\t@unmanaged() protected _idProvider?: IdProvider\r\n\t) {\r\n\t}\r\n\r\n\tprotected get validator(): JoiModelValidator<TModel> {\r\n\t\treturn this._ClassDTO['validator'];\r\n\t}\r\n\r\n\tprotected get translator(): ModelAutoMapper<TModel> {\r\n\t\treturn this._ClassDTO['translator'];\r\n\t}\r\n\r\n\r\n\tpublic async countAll(payload: any, resolve: PromiseResolveFn, reject: PromiseRejectFn, request: IRpcRequest) {\r\n\t\tconsole.log('Counting model');\r\n\t\tlet count = await this._repo.countAll(payload.options);\r\n\t\tresolve(count);\r\n\t}\r\n\r\n\tpublic async create(payload: any, resolve: PromiseResolveFn, reject: PromiseRejectFn, request: IRpcRequest) {\r\n\t\tconsole.log('Creating model');\r\n\t\tpayload.model.id = payload.model.id || this._idProvider.nextBigInt().toString();\r\n\t\tlet dto = this.translator.whole(payload.model);\r\n\t\tdto = await this._repo.create(dto, payload.options);\r\n\t\tresolve(dto);\r\n\t}\r\n\r\n\tpublic async deleteHard(payload: any, resolve: PromiseResolveFn, reject: PromiseRejectFn, request: IRpcRequest) {\r\n\t\tconsole.log('Hard deleting model');\r\n\t\tlet pk = this.validator.pk(payload.pk),\r\n\t\t\tnRows = await this._repo.deleteHard(pk, payload.options);\r\n\t\tresolve(nRows);\r\n\t}\r\n\r\n\tpublic async deleteSoft(payload: any, resolve: PromiseResolveFn, reject: PromiseRejectFn, request: IRpcRequest) {\r\n\t\tconsole.log('Soft deleting model');\r\n\t\tlet pk = this.validator.pk(payload.pk),\r\n\t\t\tnRows = await this._repo.deleteSoft(pk, payload.options);\r\n\t\tresolve(nRows);\r\n\t}\r\n\r\n\tpublic async exists(payload: any, resolve: PromiseResolveFn, reject: PromiseRejectFn, request: IRpcRequest) {\r\n\t\tconsole.log('Checking existence');\r\n\t\tlet gotIt: boolean = await this._repo.exists(payload.props, payload.options);\r\n\t\tresolve(gotIt);\r\n\t}\r\n\r\n\tpublic async findByPk(payload: any, resolve: PromiseResolveFn, reject: PromiseRejectFn, request: IRpcRequest) {\r\n\t\tconsole.log('Finding model');\r\n\t\tlet pk = this.validator.pk(payload.pk),\r\n\t\t\tfoundDto: TModel = await this._repo.findByPk(pk, payload.options);\r\n\t\tresolve(foundDto);\r\n\t}\r\n\r\n\tpublic async recover(payload: any, resolve: PromiseResolveFn, reject: PromiseRejectFn, request: IRpcRequest) {\r\n\t\tconsole.log('Recovering model');\r\n\t\tlet pk = this.validator.pk(payload.pk),\r\n\t\t\tnRows = await this._repo.recover(pk, payload.options);\r\n\t\tresolve(nRows);\r\n\t}\r\n\r\n\tpublic async page(payload: any, resolve: PromiseResolveFn, reject: PromiseRejectFn, request: IRpcRequest) {\r\n\t\tconsole.log('Paging model');\r\n\t\tlet models = await this._repo.page(payload.pageIndex, payload.pageSize, payload.options);\r\n\t\tresolve(models);\r\n\t}\r\n\r\n\tpublic async patch(payload: any, resolve: PromiseResolveFn, reject: PromiseRejectFn, request: IRpcRequest) {\r\n\t\tconsole.log('Patching model');\r\n\t\tlet model: Partial<TModel> = this.translator.partial(payload.model),\r\n\t\t\tupdatedProps: Partial<TModel> = await this._repo.patch(model, payload.options);\r\n\t\tresolve(updatedProps);\r\n\t}\r\n\r\n\tpublic async update(payload: any, resolve: PromiseResolveFn, reject: PromiseRejectFn, request: IRpcRequest) {\r\n\t\tconsole.log('Updating model');\r\n\t\tlet model: TModel = this.translator.whole(payload.model),\r\n\t\t\tupdatedModel: TModel = await this._repo.update(model, payload.options);\r\n\t\tresolve(updatedModel);\r\n\t}\r\n}"]}