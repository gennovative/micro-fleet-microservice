{"version":3,"sources":["app/utils/DependencyContainer.ts"],"names":[],"mappings":";AAAA,yCAAsE;AAG7D,4CAAU;AAAE,oCAAM;AAF3B,mCAAgC;AAIhC;IAEC,YAAoB,QAA6C;QAA7C,aAAQ,GAAR,QAAQ,CAAqC;IAEjE,CAAC;IAED,WAAW;QACV,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC;IAClC,CAAC;IAED,WAAW;QACV,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC;IAClC,CAAC;CACD;AAbD,oCAaC;AAED;IAGC;QACC,IAAI,CAAC,UAAU,GAAG,IAAI,qBAAS,EAAE,CAAC;IACnC,CAAC;IAEM,IAAI,CAAa,UAA2B,EAAE,WAA2C;QAC/F,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,aAAK,CAAC,aAAa,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QAEhD,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,EAC9B,OAAO,EAAE,KAAK,CAAC;QAEhB,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACnC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC9B,CAAC;QAED,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAa,UAAU,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;QACvE,KAAK,GAAG,IAAI,YAAY,CAAa,OAAO,CAAC,CAAC;QAE9C,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAEM,OAAO,CAAI,UAA2B;QAC5C,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAI,UAAU,CAAC,CAAC;QAC3C,CAAC;QAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACb,OAAO,CAAC,GAAG,CAAC,iBAAiB,GAAG,EAAE,CAAC,CAAC;YACpC,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;IACF,CAAC;IAEM,OAAO;QACb,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACxB,CAAC;IAEO,iBAAiB;QACxB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACtB,MAAM,8BAA8B,CAAC;QACtC,CAAC;IACF,CAAC;CACD;AA5CD,kDA4CC","file":"DependencyContainer.js","sourcesContent":["import { injectable, inject, Container, interfaces } from 'inversify';\r\nimport { Guard } from './Guard';\r\n\r\nexport { injectable, inject };\r\n\r\nexport class BindingScope<T> {\r\n\t\r\n\tconstructor(private _binding: interfaces.BindingInWhenOnSyntax<T>) {\r\n\t\t\r\n\t}\r\n\r\n\tasSingleton(): void {\r\n\t\tthis._binding.inSingletonScope();\r\n\t}\r\n\r\n\tasTransient(): void {\r\n\t\tthis._binding.inTransientScope();\r\n\t}\r\n}\r\n\r\nexport class DependencyContainer {\r\n\tprivate _container: Container;\r\n\r\n\tconstructor() {\r\n\t\tthis._container = new Container();\r\n\t}\r\n\r\n\tpublic bind<TInterface>(identifier: string | symbol, constructor: interfaces.Newable<TInterface>): BindingScope<TInterface> {\r\n\t\tthis.assertNotDisposed();\r\n\t\tGuard.assertDefined('constructor', constructor);\r\n\t\t\r\n\t\tlet container = this._container,\r\n\t\t\tbinding, scope;\r\n\t\t\r\n\t\tif (container.isBound(identifier)) {\r\n\t\t\tcontainer.unbind(identifier);\r\n\t\t}\r\n\r\n\t\tbinding = this._container.bind<TInterface>(identifier).to(constructor);\r\n\t\tscope = new BindingScope<TInterface>(binding);\r\n\r\n\t\treturn scope;\r\n\t}\r\n\r\n\tpublic resolve<T>(identifier: string | symbol): T {\r\n\t\tthis.assertNotDisposed();\r\n\t\ttry {\r\n\t\t\treturn this._container.get<T>(identifier);\r\n\t\t} catch (ex) {\r\n\t\t\tconsole.log('Resolve Error: ' + ex);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tthis._container.unbindAll();\r\n\t\tthis._container = null;\r\n\t}\r\n\r\n\tprivate assertNotDisposed() {\r\n\t\tif (!this._container) {\r\n\t\t\tthrow 'Container has been disposed!';\r\n\t\t}\r\n\t}\r\n}"]}