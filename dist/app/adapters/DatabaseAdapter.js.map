{"version":3,"sources":["app/adapters/DatabaseAdapter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAIA,+DAAqG;AACrG,+DAA0D;AAG1D,0DAA4D;AAC5D,8CAAgD;AAMhD;;GAEG;AAEH,IAAa,mBAAmB,GAAhC;IAEC,YACoC,eAAuC,EACxC,YAAgC;QAD/B,oBAAe,GAAf,eAAe,CAAwB;QACxC,iBAAY,GAAZ,YAAY,CAAoB;IAEnE,CAAC;IAEM,IAAI;QACV,MAAM,CAAC,IAAI,OAAO,CAAO,OAAO;YAC/B,IAAI,MAAM,GAAG,IAAI,CAAC,eAAe,EAChC,QAAQ,GAAsB,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAExD,gGAAgG;YAChG,8EAA8E;YAC9E,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC1C,OAAO,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;IACJ,CAAC;IAEY,OAAO;;YACnB,uDAAuD;YACvD,qEAAqE;YACrE,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;YAClC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC7B,CAAC;KAAA;IAGO,iBAAiB;QACxB,IAAI,MAAM,GAAG,IAAI,CAAC,eAAe,EAChC,SAAS,GAAsB;YAC9B,UAAU,EAAE,+BAAQ,CAAC,UAAU;SAC/B,EACD,KAAa,CAAC;QAEf,yCAAyC;QACzC,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,OAAO,CAAC,CAAC;QAC9B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,SAAS,CAAC,QAAQ,GAAG,KAAK,CAAC;YAC3B,MAAM,CAAC,SAAS,CAAC;QAClB,CAAC;QAED,kDAAkD;QAClD,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,cAAc,CAAC,CAAC;QACrC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,SAAS,CAAC,gBAAgB,GAAG,KAAK,CAAC;YACnC,MAAM,CAAC,SAAS,CAAC;QAClB,CAAC;QAED,gDAAgD;QAChD,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,OAAO,CAAC,CAAC;QAC9B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,SAAS,CAAC,IAAI,GAAG;gBAChB,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,OAAO,CAAC;gBAC9B,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,OAAO,CAAC;gBAC3B,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,WAAW,CAAC;gBACnC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,OAAO,CAAC;aAC/B,CAAC;YACF,MAAM,CAAC,SAAS,CAAC;QAClB,CAAC;QACD,MAAM,uBAAuB,CAAC;IAC/B,CAAC;CACD,CAAA;AA/DY,mBAAmB;IAD/B,iCAAU,EAAE;IAIV,WAAA,6BAAM,CAAC,aAAC,CAAC,eAAe,CAAC,CAAA;IACzB,WAAA,6BAAM,CAAC,4BAAG,CAAC,YAAY,CAAC,CAAA;;GAJd,mBAAmB,CA+D/B;AA/DY,kDAAmB","file":"DatabaseAdapter.js","sourcesContent":["\r\nimport * as knex from 'knex';\r\nimport { Model } from 'objection';\r\n\r\nimport { IDatabaseConnector, IConnectionDetail, DbClient, Types as CmT } from 'back-lib-persistence';\r\nimport { injectable, inject } from 'back-lib-common-util';\r\n\r\nimport { IConfigurationProvider } from './ConfigurationProvider';\r\nimport { SettingKeys as S } from '../constants/SettingKeys';\r\nimport { Types as T } from '../constants/Types';\r\n\r\nexport interface IDatabaseAdapter extends IAdapter {\r\n\tdispose(): Promise<void>;\r\n}\r\n\r\n/**\r\n * Provides settings from package\r\n */\r\n@injectable()\r\nexport class KnexDatabaseAdapter implements IDatabaseAdapter {\r\n\t\r\n\tconstructor(\r\n\t\t@inject(T.CONFIG_PROVIDER) private _configProvider: IConfigurationProvider,\r\n\t\t@inject(CmT.DB_CONNECTOR) private _dbConnector: IDatabaseConnector\r\n\t) {\r\n\t}\r\n\r\n\tpublic init(): Promise<void> {\r\n\t\treturn new Promise<void>(resolve => {\r\n\t\t\tlet cfgAdt = this._configProvider,\r\n\t\t\t\tsettings: IConnectionDetail = this.buildConnSettings();\r\n\t\t\t\r\n\t\t\t// TODO 1: Should allow setting \"client\" from remote configuration (show a dropdown box in GUI).\r\n\t\t\t// TODO 2: Should allow setting multiple connection from remote configuration.\r\n\t\t\tthis._dbConnector.addConnection(settings);\r\n\t\t\tresolve();\r\n\t\t});\r\n\t}\r\n\r\n\tpublic async dispose(): Promise<void> {\r\n\t\t// Casting from Bluebird Promise to Node native Promise\r\n\t\t// This cast is for compiler, hence no effect to runtime performance.\r\n\t\tawait this._dbConnector.dispose();\r\n\t\tthis._dbConnector = null;\r\n\t\tthis._configProvider = null;\r\n\t}\r\n\r\n\r\n\tprivate buildConnSettings(): IConnectionDetail {\r\n\t\tlet cfgAdt = this._configProvider,\r\n\t\t\tcnnDetail: IConnectionDetail = {\r\n\t\t\t\tclientName: DbClient.POSTGRESQL\r\n\t\t\t},\r\n\t\t\tvalue: string;\r\n\r\n\t\t// 1st priority: connect to a local file.\r\n\t\tvalue = cfgAdt.get(S.DB_FILE);\r\n\t\tif (value) {\r\n\t\t\tcnnDetail.fileName = value;\r\n\t\t\treturn cnnDetail;\r\n\t\t}\r\n\r\n\t\t// 2nd priority: connect with a connection string.\r\n\t\tvalue = cfgAdt.get(S.DB_CONN_STRING);\r\n\t\tif (value) {\r\n\t\t\tcnnDetail.connectionString = value;\r\n\t\t\treturn cnnDetail;\r\n\t\t}\r\n\r\n\t\t// Last priority: connect with host credentials.\r\n\t\tvalue = cfgAdt.get(S.DB_HOST);\r\n\t\tif (value) {\r\n\t\t\tcnnDetail.host = {\r\n\t\t\t\taddress: cfgAdt.get(S.DB_HOST),\r\n\t\t\t\tuser: cfgAdt.get(S.DB_USER),\r\n\t\t\t\tpassword: cfgAdt.get(S.DB_PASSWORD),\r\n\t\t\t\tdatabase: cfgAdt.get(S.DB_NAME),\r\n\t\t\t};\r\n\t\t\treturn cnnDetail;\r\n\t\t}\r\n\t\tthrow 'No database settings!';\r\n\t}\r\n}"]}