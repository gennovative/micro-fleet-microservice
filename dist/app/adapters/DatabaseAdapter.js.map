{"version":3,"sources":["app/adapters/DatabaseAdapter.ts"],"names":[],"mappings":"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","file":"DatabaseAdapter.js","sourcesContent":["import * as knex from 'knex';\r\nimport { Model } from 'objection';\r\n\r\nimport { injectable, inject } from 'back-lib-common-util';\r\n\r\nimport { IConfigurationProvider } from './ConfigurationProvider';\r\nimport { SettingKeys as S } from '../constants/SettingKeys';\r\nimport { Types as T } from '../constants/Types';\r\n\r\n/**\r\n * Db driver names for `IDatabaseAdapter.clientName` property.\r\n */\r\nexport class DbClient {\r\n\t/**\r\n\t * Microsoft SQL Server\r\n\t */\r\n\tpublic static readonly MSSQL = 'mssql';\r\n\t\r\n\t/**\r\n\t * MySQL\r\n\t */\r\n\tpublic static readonly MYSQL = 'mysql';\r\n\t\r\n\t/**\r\n\t * PostgreSQL\r\n\t */\r\n\tpublic static readonly POSTGRESQL = 'pg';\r\n\t\r\n\t/**\r\n\t * SQLite 3\r\n\t */\r\n\tpublic static readonly SQLITE3 = 'sqlite3';\r\n}\r\n\r\nexport interface IDatabaseAdapter extends IAdapter {\r\n\tclientName: string;\r\n\tdispose(): Promise<void>;\r\n}\r\n\r\n/**\r\n * Provides settings from package\r\n */\r\n@injectable()\r\nexport class KnexDatabaseAdapter implements IDatabaseAdapter {\r\n\t\r\n\tprivate _clientName: string;\r\n\tprivate _knex; // for unittest mocking\r\n\r\n\tconstructor(\r\n\t\t@inject(T.CONFIG_PROVIDER) private _configProvider: IConfigurationProvider\r\n\t) {\r\n\t\tthis._clientName = DbClient.POSTGRESQL;\r\n\t\tthis._knex = knex;\r\n\t}\r\n\r\n\tpublic get clientName(): string {\r\n\t\treturn this._clientName;\r\n\t}\r\n\r\n\tpublic set clientName(value: string) {\r\n\t\tthis._clientName = value;\r\n\t}\r\n\r\n\tpublic init(): Promise<void> {\r\n\t\treturn new Promise<void>(resolve => {\r\n\t\t\tlet cfgAdt = this._configProvider,\r\n\t\t\t\tsettings = {\r\n\t\t\t\t\tclient: this._clientName,\r\n\t\t\t\t\tuseNullAsDefault: true,\r\n\t\t\t\t\tconnection: this.buildConnSettings()\r\n\t\t\t\t},\r\n\t\t\t\tk = this._knex(settings);\r\n\t\t\tModel.knex(k);\r\n\t\t\tresolve();\r\n\t\t});\r\n\t}\r\n\r\n\tpublic async dispose(): Promise<void> {\r\n\t\t// Casting from Bluebird Promise to Node native Promise\r\n\t\t// This cast is for compiler, hence no effect to runtime performance.\r\n\t\tawait Model.knex().destroy();\r\n\t\tthis._configProvider = null;\r\n\t\tthis._knex = null;\r\n\t\tthis._clientName = null;\r\n\t}\r\n\r\n\tprivate buildConnSettings(): any {\r\n\t\tlet cfgAdt = this._configProvider,\r\n\t\t\tvalue: string;\r\n\r\n\t\t// 1st priority: connect to a local file.\r\n\t\tvalue = cfgAdt.get(S.DB_FILE);\r\n\t\tif (value && value.length) {\r\n\t\t\treturn { filename: value };\r\n\t\t}\r\n\r\n\t\t// 2nd priority: connect with a connection string.\r\n\t\tvalue = cfgAdt.get(S.DB_CONN_STRING);\r\n\t\tif (value && value.length) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\t// Last priority: connect with host credentials.\r\n\t\tvalue = cfgAdt.get(S.DB_HOST);\r\n\t\tif (value && value.length) {\r\n\t\t\treturn {\r\n\t\t\t\thost: cfgAdt.get(S.DB_HOST),\r\n\t\t\t\tuser: cfgAdt.get(S.DB_USER),\r\n\t\t\t\tpassword: cfgAdt.get(S.DB_PASSWORD),\r\n\t\t\t\tdatabase: cfgAdt.get(S.DB_NAME),\r\n\t\t\t};\r\n\t\t}\r\n\t\tthrow 'No database settings!';\r\n\t}\r\n}"]}