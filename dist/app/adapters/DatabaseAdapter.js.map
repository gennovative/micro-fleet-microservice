{"version":3,"sources":["app/adapters/DatabaseAdapter.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,6BAA6B;AAC7B,yCAAkC;AAIlC,sEAAkE;AAClE,0DAA4D;AAC5D,8CAAgD;AAYhD,IAAa,mBAAmB,GAAhC;IAKC,YACmC,cAAqC;QAArC,mBAAc,GAAd,cAAc,CAAuB;QAEvE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,IAAW,UAAU;QACpB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;IAED,IAAW,UAAU,CAAC,KAAa;QAClC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC1B,CAAC;IAEM,IAAI;QACV,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,EAC/B,QAAQ,GAAG;YACV,MAAM,EAAE,IAAI,CAAC,WAAW;YACxB,gBAAgB,EAAE,IAAI;YACtB,UAAU,EAAE,IAAI,CAAC,iBAAiB,EAAE;SACpC,EACD,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAE1B,iBAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAEM,OAAO;QAGb,MAAM,CAAqB,CAAC,iBAAK,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;IACrD,CAAC;IAEO,iBAAiB;QACxB,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,EAC/B,KAAa,CAAC;QAGf,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,OAAO,CAAC,CAAC;QAC9B,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;QAC5B,CAAC;QAGD,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,cAAc,CAAC,CAAC;QACrC,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;QAGD,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,OAAO,CAAC,CAAC;QAC9B,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC;gBACN,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,OAAO,CAAC;gBAC3B,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,OAAO,CAAC;gBAC3B,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,WAAW,CAAC;gBACnC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,yBAAC,CAAC,OAAO,CAAC;aAC/B,CAAC;QACH,CAAC;QACD,MAAM,uBAAuB,CAAC;IAC/B,CAAC;CACD,CAAA;AAnEY,mBAAmB;IAD/B,gCAAU,EAAE;IAOV,WAAA,4BAAM,CAAC,aAAC,CAAC,cAAc,CAAC,CAAA;;GANd,mBAAmB,CAmE/B;AAnEY,kDAAmB","file":"DatabaseAdapter.js","sourcesContent":["import * as knex from 'knex';\r\nimport { Model } from 'objection';\r\n\r\nimport { IAdapter } from './IAdapter';\r\nimport { IConfigurationAdapter } from './ConfigurationAdapter';\r\nimport { injectable, inject } from '../utils/DependencyContainer';\r\nimport { SettingKeys as S } from '../constants/SettingKeys';\r\nimport { Types as T } from '../constants/Types';\r\n\r\n\r\nexport interface IDatabaseAdapter extends IAdapter {\r\n\tclientName: string;\r\n\tdestroy(): Promise<void>;\r\n}\r\n\r\n/**\r\n * Provides settings from package\r\n */\r\n@injectable()\r\nexport class KnexDatabaseAdapter implements IDatabaseAdapter {\r\n\t\r\n\tprivate _clientName: string;\r\n\tprivate _knex; // for unittest mocking\r\n\r\n\tconstructor(\r\n\t\t@inject(T.CONFIG_ADAPTER) private _configAdapter: IConfigurationAdapter\r\n\t) {\r\n\t\tthis._clientName = 'pg';\r\n\t\tthis._knex = knex;\r\n\t}\r\n\r\n\tpublic get clientName(): string {\r\n\t\treturn this._clientName;\r\n\t}\r\n\r\n\tpublic set clientName(value: string) {\r\n\t\tthis._clientName = value;\r\n\t}\r\n\r\n\tpublic init(): Promise<boolean> {\r\n\t\tlet cfgAdt = this._configAdapter,\r\n\t\t\tsettings = {\r\n\t\t\t\tclient: this._clientName,\r\n\t\t\t\tuseNullAsDefault: true,\r\n\t\t\t\tconnection: this.buildConnSettings()\r\n\t\t\t},\r\n\t\t\tk = this._knex(settings);\r\n\r\n\t\tModel.knex(k);\r\n\t\treturn Promise.resolve(true);\r\n\t}\r\n\r\n\tpublic destroy(): Promise<void> {\r\n\t\t// Casting from Bluebird Promise to Node native Promise\r\n\t\t// This cast is for compiler, hence no effect to runtime performance.\r\n\t\treturn <Promise<void>><any>(Model.knex().destroy());\r\n\t}\r\n\r\n\tprivate buildConnSettings(): any {\r\n\t\tlet cfgAdt = this._configAdapter,\r\n\t\t\tvalue: string;\r\n\r\n\t\t// 1st priority: connect to a local file.\r\n\t\tvalue = cfgAdt.get(S.DB_FILE);\r\n\t\tif (value && value.length) {\r\n\t\t\treturn { filename: value };\r\n\t\t}\r\n\r\n\t\t// 2nd priority: connect with a connection string.\r\n\t\tvalue = cfgAdt.get(S.DB_CONN_STRING);\r\n\t\tif (value && value.length) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\t// Last priority: connect with host credentials.\r\n\t\tvalue = cfgAdt.get(S.DB_HOST);\r\n\t\tif (value && value.length) {\r\n\t\t\treturn {\r\n\t\t\t\thost: cfgAdt.get(S.DB_HOST),\r\n\t\t\t\tuser: cfgAdt.get(S.DB_USER),\r\n\t\t\t\tpassword: cfgAdt.get(S.DB_PASSWORD),\r\n\t\t\t\tdatabase: cfgAdt.get(S.DB_NAME),\r\n\t\t\t};\r\n\t\t}\r\n\t\tthrow 'No database settings!';\r\n\t}\r\n}"]}