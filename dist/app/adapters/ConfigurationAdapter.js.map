{"version":3,"sources":["app/adapters/ConfigurationAdapter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,2CAA2C;AAE3C,sEAA0D;AAC1D,0DAA4D;AAY5D,IAAa,oBAAoB,GAAjC;IAQC;QAPQ,oBAAe,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,iBAAiB,CAAC;QAQ3D,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;QAC7B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC5B,CAAC;IAED,IAAI,YAAY;QACf,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAED,IAAI,YAAY,CAAC,KAAc;QAC9B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC5B,CAAC;IAEM,IAAI;QACV,IAAI,CAAC;YACJ,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACpD,CAAC;QAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACzB,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAMM,GAAG,CAAC,GAAW;QACrB,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;QACvF,MAAM,CAAC,CAAC,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC;IAC/B,CAAC;IAKY,KAAK;;YACjB,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,yBAAC,CAAC,wBAAwB,CAAC,CAAC;YAEtD,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;gBAAC,MAAM,uCAAuC,CAAC;YAAC,CAAC;YAEzF,IAAI,WAAW,GAAa,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAChD,CAAC,GAAG,CAAC,CAAC;YACP,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpC,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAE7C,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;YACF,CAAC;YAED,MAAM,yDAAyD,CAAC;QACjE,CAAC;KAAA;IAGa,YAAY,CAAC,OAAe;;YACzC,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,yBAAC,CAAC,YAAY,CAAC,EACzC,OAAO,GAAG;gBACT,GAAG,EAAE,OAAO;gBACZ,EAAE,EAAE;oBACH,IAAI,EAAE,WAAW;iBACjB;gBACD,IAAI,EAAE,IAAI;aACV,CAAC;YAEH,IAAI,CAAC;gBACJ,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;oBAClB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACrC,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;YACF,CAAC;YAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAEf,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACd,CAAC;KAAA;CACD,CAAA;AAlFY,oBAAoB;IADhC,gCAAU,EAAE;;GACA,oBAAoB,CAkFhC;AAlFY,oDAAoB","file":"ConfigurationAdapter.js","sourcesContent":["import * as request from 'request-promise';\r\nimport { IAdapter } from './IAdapter';\r\nimport { injectable } from '../utils/DependencyContainer';\r\nimport { SettingKeys as S } from '../constants/SettingKeys';\r\n\r\nexport interface IConfigurationAdapter extends IAdapter {\r\n\tenableRemote: boolean;\r\n\tget(key: string): string;\r\n\tfetch(): Promise<boolean>;\r\n}\r\n\r\n/**\r\n * Provides settings from package\r\n */\r\n@injectable()\r\nexport class ConfigurationAdapter implements IConfigurationAdapter {\r\n\tprivate _configFilePath = `${process.cwd()}/appconfig.json`;\r\n\tprivate _startupPath: string;\r\n\tprivate _fileSettings;\r\n\tprivate _requestMaker;\r\n\tprivate _remoteSettings;\r\n\tprivate _enableRemote: boolean;\r\n\r\n\tconstructor() {\r\n\t\tthis._remoteSettings = {};\r\n\t\tthis._requestMaker = request;\r\n\t\tthis._enableRemote = false;\r\n\t}\r\n\r\n\tget enableRemote(): boolean {\r\n\t\treturn this._enableRemote;\r\n\t}\r\n\r\n\tset enableRemote(value: boolean) {\r\n\t\tthis._enableRemote = value;\r\n\t}\r\n\r\n\tpublic init(): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tthis._fileSettings = require(this._configFilePath);\r\n\t\t} catch (ex) {\r\n\t\t\tthis._fileSettings = {};\r\n\t\t}\r\n\t\treturn Promise.resolve(true);\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to get settings from cached Configuration Service, environmetal variable,\r\n\t * and `appconfig.json` file, respectedly.\r\n\t */\r\n\tpublic get(key: string): string {\r\n\t\tlet value = (this._remoteSettings[key] || process.env[key] || this._fileSettings[key]);\r\n\t\treturn (value ? value : null);\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to fetch settings from remote Configuration Service.\r\n\t */\r\n\tpublic async fetch(): Promise<boolean> {\r\n\t\tlet addressRaw = this.get(S.CONFIG_SERVICE_ADDRESSES);\r\n\r\n\t\tif (!addressRaw || !addressRaw.length) { throw 'No address for Configuration Service!'; }\r\n\r\n\t\tlet addressList: string[] = addressRaw.split(';'),\r\n\t\t\ti = 0;\r\n\t\tfor (; i < addressList.length; i++) {\r\n\t\t\tif (await this.attemptFetch(addressList[i])) {\r\n\t\t\t\t// Stop trying if success\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow 'Cannot connect to any address of Configuration Service!';\r\n\t}\r\n\r\n\r\n\tprivate async attemptFetch(address: string): Promise<boolean> {\r\n\t\tlet serviceName = this.get(S.SERVICE_NAME),\r\n\t\t\toptions = {\r\n\t\t\t\turi: address,\r\n\t\t\t\tqs: {\r\n\t\t\t\t\tname: serviceName // -> uri + '?name=xxxxx'\r\n\t\t\t\t},\r\n\t\t\t\tjson: true // Automatically parses the JSON string in the response\r\n\t\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tlet json = await this._requestMaker(options);\r\n\t\t\tif (json.success) {\r\n\t\t\t\tthis._remoteSettings = json.settings;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\t// TODO: Writing logs\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}"]}