{"version":3,"sources":["app/microservice/MicroServiceBase.ts"],"names":[],"mappings":";;;;;;;;;AACA,2EAA+F;AAC/F,iEAAoF;AACpF,sEAAmE;AACnE,8CAAgD;AAGhD;IAKC;QACC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACrB,CAAC;IAEM,KAAK;QACX,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAGxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAEtB,IAAI,CAAC,YAAY,EAAE;aACjB,IAAI,CAAC;YACL,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC,CAAC;aACD,KAAK,CAAC,GAAG;YACT,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEpB,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,IAAI;QACV,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IAIS,YAAY;QACrB,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAmB,aAAC,CAAC,UAAU,CAAC,CAAC;QACvE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC;IAES,UAAU,CAAC,WAA6B;IAClD,CAAC;IAES,SAAS,CAAC,WAA6B;IACjD,CAAC;IAES,UAAU,CAAC,WAA6B;IAClD,CAAC;IAES,SAAS,CAAC,WAA6B;IACjD,CAAC;IAGO,UAAU,CAAC,OAAiB;QACnC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAEO,gBAAgB;QACvB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAwB,aAAC,CAAC,cAAc,CAAC,CAAC;QAC1F,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACtC,CAAC;IAEO,oBAAoB;QAC3B,IAAI,CAAC,aAAa,GAAG,IAAI,yCAAmB,EAAE,CAAC;QAC/C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAwB,aAAC,CAAC,cAAc,EAAE,2CAAoB,CAAC,CAAC;QACvF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAmB,aAAC,CAAC,UAAU,EAAE,qCAAmB,CAAC,CAAC;IAC9E,CAAC;IAEa,YAAY;;YACzB,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,EAC/B,YAAY,CAAC;YAId,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;YAIpB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,KAAI,MAAM,MAAM,CAAC,KAAK,EAAE,CAAA,CAAC,CAAC,CAAC;gBAClD,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;YACpD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,MAAM,8BAA8B,CAAC;YACtC,CAAC;YAED,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC;KAAA;CACD;AApFD,4CAoFC","file":"MicroServiceBase.js","sourcesContent":["import { IAdapter } from '../adapters/IAdapter';\r\nimport { IConfigurationAdapter, ConfigurationAdapter } from '../adapters/ConfigurationAdapter';\r\nimport { IDatabaseAdapter, KnexDatabaseAdapter } from '../adapters/DatabaseAdapter';\r\nimport { DependencyContainer } from '../utils/DependencyContainer';\r\nimport { Types as T } from '../constants/Types';\r\n\r\n\r\nexport abstract class MicroServiceBase {\r\n\tprotected _configAdapter: IConfigurationAdapter;\r\n\tprotected _depContainer: DependencyContainer;\r\n\tprotected _adapters: IAdapter[];\r\n\t\r\n\tconstructor() {\r\n\t\tthis._adapters = [];\r\n\t}\r\n\r\n\tpublic start(): void {\r\n\t\tthis.registerDependencies();\r\n\t\tthis.addConfigAdapter();\r\n\t\t\r\n\t\t// A chance for derived class to add more adapters or do some customizations.\r\n\t\tthis.onStarting(this);\r\n\t\t\r\n\t\tthis.initAdapters()\r\n\t\t\t.then(() => {\r\n\t\t\t\tthis.onStarted(this);\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.error(err);\r\n\t\t\t\t// TODO: Should log to file.\r\n\t\t\t});\r\n\t}\r\n\r\n\tpublic stop(): void {\r\n\t\tthis.onStopping(this);\r\n\t\tthis.onStopped(this);\r\n\t}\r\n\t\r\n\r\n\t\r\n\tprotected addDbAdapter(): void {\r\n\t\tlet dbAdt = this._depContainer.resolve<IDatabaseAdapter>(T.DB_ADAPTER);\r\n\t\tthis.addAdapter(dbAdt);\r\n\t}\r\n\r\n\tprotected onStarting(thisService: MicroServiceBase): void {\r\n\t}\r\n\r\n\tprotected onStarted(thisService: MicroServiceBase): void {\r\n\t}\r\n\r\n\tprotected onStopping(thisService: MicroServiceBase): void {\r\n\t}\r\n\r\n\tprotected onStopped(thisService: MicroServiceBase): void {\r\n\t}\r\n\r\n\r\n\tprivate addAdapter(adapter: IAdapter): void {\r\n\t\tthis._adapters.push(adapter);\r\n\t}\r\n\r\n\tprivate addConfigAdapter(): void {\r\n\t\tthis._configAdapter = this._depContainer.resolve<IConfigurationAdapter>(T.CONFIG_ADAPTER);\r\n\t\tthis.addAdapter(this._configAdapter);\r\n\t}\r\n\r\n\tprivate registerDependencies(): void {\r\n\t\tthis._depContainer = new DependencyContainer();\r\n\t\tthis._depContainer.bind<IConfigurationAdapter>(T.CONFIG_ADAPTER, ConfigurationAdapter);\r\n\t\tthis._depContainer.bind<IDatabaseAdapter>(T.DB_ADAPTER, KnexDatabaseAdapter);\r\n\t}\r\n\r\n\tprivate async initAdapters(): Promise<void> {\r\n\t\tlet cfgAdt = this._configAdapter,\r\n\t\t\tinitPromises;\r\n\r\n\t\t// Config adapter must be initialized first, because all other adapters\r\n\t\t// depend on it.\r\n\t\tawait cfgAdt.init();\r\n\r\n\t\t// If remote config is disabled or\r\n\t\t// if remote config is enanbed and fetching successfully.\r\n\t\tif (!cfgAdt.enableRemote || await cfgAdt.fetch()) {\r\n\t\t\tinitPromises = this._adapters.map(adt => adt.init);\r\n\t\t} else {\r\n\t\t\tthrow 'Fail to fetch configuration!';\r\n\t\t}\r\n\r\n\t\tawait Promise.all(initPromises);\r\n\t}\r\n}"]}