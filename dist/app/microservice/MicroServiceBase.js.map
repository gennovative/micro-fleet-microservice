{"version":3,"sources":["app/microservice/MicroServiceBase.ts"],"names":[],"mappings":"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","file":"MicroServiceBase.js","sourcesContent":["import * as cm from 'back-lib-common-util';\r\nimport * as per from 'back-lib-persistence';\r\nimport * as com from 'back-lib-service-communication';\r\n\r\nimport * as cfg from '../addons/ConfigurationProvider';\r\nimport * as db from '../addons/DatabaseAddOn';\r\nimport { MessageBrokerAddOn } from '../addons/MessageBrokerAddOn';\r\nimport { Types as T } from '../constants/Types';\r\n\r\n\r\nexport abstract class MicroServiceBase {\r\n\tprotected _configProvider: cfg.IConfigurationProvider;\r\n\tprotected _depContainer: cm.IDependencyContainer;\r\n\tprotected _addons: IServiceAddOn[];\r\n\tprotected _isStarted: boolean;\r\n\t\r\n\tconstructor() {\r\n\t\tthis._addons = [];\r\n\t\tthis._isStarted = false;\r\n\t}\r\n\r\n\tpublic get isStarted(): boolean {\r\n\t\treturn this._isStarted;\r\n\t}\r\n\r\n\t/**\r\n\t * Bootstraps this service application.\r\n\t */\r\n\tpublic start(): void {\r\n\t\tthis.registerDependencies();\r\n\t\tthis.attachConfigProvider();\r\n\r\n\t\ttry {\r\n\t\t\t// A chance for derived class to add more add-ons or do some customizations.\r\n\t\t\tthis.onStarting();\r\n\t\t} catch (ex) {\r\n\t\t\tthis.onError(ex);\r\n\t\t\tconsole.error('An error occured on starting, the application has to stop now.');\r\n\t\t\tthis.stop();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.initAddOns()\r\n\t\t\t.then(() => {\r\n\t\t\t\tthis._isStarted = true;\r\n\t\t\t\tthis.handleGracefulShutdown();\r\n\t\t\t\tthis.onStarted();\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tthis.onError(err);\r\n\t\t\t\tconsole.error('An error occured on initializing add-ons, the application has to stop now.');\r\n\t\t\t\tthis.stop();\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Gracefully stops this application and exit \r\n\t */\r\n\tpublic stop(exitProcess: boolean = true): void {\r\n\t\t(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tthis.onStopping();\r\n\t\t\t\tthis._depContainer.dispose();\r\n\t\t\t\tawait this.disposeAddOns();\r\n\t\t\t\tthis._isStarted = false;\r\n\t\t\t\tthis.onStopped();\r\n\t\t\t} catch (ex) {\r\n\t\t\t\tthis.onError(ex);\r\n\t\t\t} finally {\r\n\t\t\t\texitProcess &&\r\n\t\t\t\t\t/* istanbul ignore next: only useful on production */ \r\n\t\t\t\t\tthis.exitProcess();\r\n\t\t\t}\r\n\t\t})();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Total number of add-ons that have been added so far.\r\n\t */\r\n\tprotected attachAddOn(addon: IServiceAddOn): number {\r\n\t\treturn this._addons.push(addon);\r\n\t}\r\n\r\n\tprotected attachDbAddOn(): db.IDatabaseAddOn {\r\n\t\tlet dbAdt = this._depContainer.resolve<db.IDatabaseAddOn>(T.DB_ADDON);\r\n\t\tthis.attachAddOn(dbAdt);\r\n\t\treturn dbAdt;\r\n\t}\r\n\r\n\tprotected attachConfigProvider(): cfg.IConfigurationProvider {\r\n\t\tlet cfgAdt = this._configProvider = this._depContainer.resolve<cfg.IConfigurationProvider>(T.CONFIG_PROVIDER);\r\n\t\tthis.attachAddOn(cfgAdt);\r\n\t\treturn cfgAdt;\r\n\t}\r\n\r\n\tprotected attachMessageBrokerAddOn(): MessageBrokerAddOn {\r\n\t\tlet dbAdt = this._depContainer.resolve<MessageBrokerAddOn>(T.BROKER_ADDON);\r\n\t\tthis.attachAddOn(dbAdt);\r\n\t\treturn dbAdt;\r\n\t}\r\n\r\n\tprotected registerDbAddOn(): void {\r\n\t\tthis._depContainer.bind<per.IDatabaseConnector>(per.Types.DB_CONNECTOR, per.KnexDatabaseConnector).asSingleton();\r\n\t\tthis._depContainer.bind<db.IDatabaseAddOn>(T.DB_ADDON, db.DatabaseAddOn).asSingleton();\r\n\t}\r\n\r\n\tprotected registerConfigProvider(): void {\r\n\t\tthis._depContainer.bind<cfg.IConfigurationProvider>(T.CONFIG_PROVIDER, cfg.ConfigurationProvider).asSingleton();\r\n\t}\r\n\r\n\tprotected registerDirectRpcCaller(): void {\r\n\t\tthis._depContainer.bind<com.IDirectRpcCaller>(com.Types.DIRECT_RPC_CALLER, com.HttpRpcCaller);\r\n\t}\r\n\r\n\tprotected registerDirectRpcHandler(): void {\r\n\t\tthis._depContainer.bind<com.IDirectRpcHandler>(com.Types.DIRECT_RPC_HANDLER, com.ExpressRpcHandler);\r\n\t}\r\n\r\n\tprotected registerMessageBrokerAddOn(): void {\r\n\t\tthis._depContainer.bind<com.IMessageBrokerConnector>(com.Types.MSG_BROKER_CONNECTOR, com.TopicMessageBrokerConnector).asSingleton();\r\n\t\tthis._depContainer.bind<MessageBrokerAddOn>(T.BROKER_ADDON, MessageBrokerAddOn).asSingleton();\r\n\t}\r\n\r\n\tprotected registerMediateRpcCaller(): void {\r\n\t\tif (!this._depContainer.isBound(com.Types.MSG_BROKER_CONNECTOR)) {\r\n\t\t\tthis.registerMessageBrokerAddOn();\r\n\t\t}\r\n\t\tthis._depContainer.bind<com.IMediateRpcCaller>(com.Types.MEDIATE_RPC_CALLER, com.MessageBrokerRpcCaller);\r\n\t}\r\n\r\n\tprotected registerMediateRpcHandler(): void {\r\n\t\tif (!this._depContainer.isBound(com.Types.MSG_BROKER_CONNECTOR)) {\r\n\t\t\tthis.registerMessageBrokerAddOn();\r\n\t\t}\r\n\t\tthis._depContainer.bind<com.IMediateRpcHandler>(com.Types.MEDIATE_RPC_HANDLER, com.MessageBrokerRpcHandler);\r\n\t}\r\n\r\n\tprotected registerDependencies(): void {\r\n\t\tlet depCon: cm.IDependencyContainer = this._depContainer = new cm.DependencyContainer();\r\n\t\tdepCon.bindConstant<cm.IDependencyContainer>(cm.Types.DEPENDENCY_CONTAINER, depCon);\r\n\t\tthis.registerConfigProvider();\r\n\t\tthis.registerDirectRpcCaller();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Invoked whenever any error occurs in the application.\r\n\t */\r\n\tprotected onError(error: any): void {\r\n\t\t/* istanbul ignore next */\r\n\t\tlet msg = (error.toString ? error.toString() : error + '');\r\n\t\tconsole.error(msg); // Should log to file.\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked after registering dependencies, but before all other initializations.\r\n\t */\r\n\tprotected onStarting(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked after all initializations. At this stage, the application is considered\r\n\t * started successfully.\r\n\t */\r\n\tprotected onStarted(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when `stop` method is called, before any other actions take place.\r\n\t */\r\n\tprotected onStopping(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked after all finalizations have finished. At this stage, the application is \r\n\t * considered stopped successfully. The process will be killed after this.\r\n\t */\r\n\tprotected onStopped(): void {\r\n\t}\r\n\r\n\tprivate async initAddOns(): Promise<void> {\r\n\t\tlet cfgPrvd = this._configProvider,\r\n\t\t\tinitPromises;\r\n\r\n\t\t// Configuration provider must be initialized first, because all other add-ons\r\n\t\t// depend on it.\r\n\t\tawait cfgPrvd.init();\r\n\r\n\t\t// If remote config is disabled or\r\n\t\t// if remote config is enanbed and fetching successfully.\r\n\t\tif (!cfgPrvd.enableRemote || await cfgPrvd.fetch()) {\r\n\t\t\tinitPromises = this._addons.map(adt => adt.init());\r\n\t\t} else {\r\n\t\t\tthrow new cm.CriticalException('Fail to fetch configuration!');\r\n\t\t}\r\n\r\n\t\tawait Promise.all(initPromises);\r\n\t}\r\n\r\n\tprivate async disposeAddOns(): Promise<void> {\r\n\t\tlet disposePromises = this._addons.map(adt => {\r\n\t\t\t// let adtName = adt.constructor.toString().substring(0, 20);\r\n\t\t\t// console.log('DISPOSING: ' + adtName);\r\n\t\t\treturn adt.dispose(); \r\n\t\t});\r\n\t\tawait Promise.all(disposePromises);\r\n\t}\r\n\t\r\n\tprivate exitProcess() {\r\n\t\tconsole.log('Application has been shutdown, the process exits now!');\r\n\t\tprocess.exit(); // TODO: Should emit an exit code to also stop Docker instance\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gracefully shutdown the application when user presses Ctrl-C in Console/Terminal,\r\n\t * or when the OS is trying to stop the service process.\r\n\t * \r\n\t */\r\n\tprivate handleGracefulShutdown() {\r\n\t\tlet handler = () => {\r\n\t\t\tconsole.log('Gracefully shutdown...');\r\n\t\t\tthis.stop();\r\n\t\t};\r\n\r\n\t\t// SIGINT is the interrupt signal.\r\n\t\t// The Terminal/Console sends it to the foreground process when the user presses Ctrl-C.\r\n\t\tprocess.on('SIGINT', handler);\r\n\r\n\t\t// SIGTERM is the termination signal.\r\n\t\t// Sent by `kill` command, or Upstart, or Heroku dynos, or Docker to shutdown the process.\r\n\t\t// After a period (~10 sec), if the process is still running, SIGKILL will be sent to force immediate termination.\r\n\t\tprocess.on('SIGTERM', handler);\r\n\t\t\r\n\t\t// Windows has no such signals, so we need to fake SIGINT:\r\n\t\t/* istanbul ignore else */\r\n\t\tif (process.platform === 'win32') {\r\n\t\t\tconst readLine = require('readline');\r\n\t\t\tlet rl = readLine.createInterface({\r\n\t\t\t\tinput: process.stdin,\r\n\t\t\t\toutput: process.stdout\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// When pressing Ctrl-C\r\n\t\t\t// Read more: https://nodejs.org/api/readline.html#readline_event_sigint\r\n\t\t\trl.on('SIGINT', () => {\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tprocess.emit('SIGINT');\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}"]}