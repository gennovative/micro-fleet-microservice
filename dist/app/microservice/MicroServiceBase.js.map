{"version":3,"sources":["app/microservice/MicroServiceBase.ts"],"names":[],"mappings":";;;;;;;;;AACA,2EAA+F;AAC/F,iEAAoF;AACpF,sEAAmE;AACnE,6CAAiD;AACjD,8CAAgD;AAGhD;IAMC;QACC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IACzB,CAAC;IAED,IAAW,SAAS;QACnB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IAED;;OAEG;IACI,KAAK;QACX,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,IAAI,CAAC;YACJ,6EAA6E;YAC7E,IAAI,CAAC,UAAU,EAAE,CAAC;QACnB,CAAC;QAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACjB,OAAO,CAAC,KAAK,CAAC,gEAAgE,CAAC,CAAC;YAChF,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,MAAM,CAAC;QACR,CAAC;QAED,IAAI,CAAC,YAAY,EAAE;aACjB,IAAI,CAAC;YACL,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC9B,IAAI,CAAC,SAAS,EAAE,CAAC;QAClB,CAAC,CAAC;aACD,KAAK,CAAC,GAAG;YACT,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,IAAI,CAAC,cAAuB,IAAI;QACtC,CAAC;YACA,IAAI,CAAC;gBACJ,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;gBAC7B,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;gBAC7B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;gBACxB,IAAI,CAAC,SAAS,EAAE,CAAC;YAClB,CAAC;YAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAClB,CAAC;oBAAS,CAAC;gBACV,WAAW;oBACV,qDAAqD;oBACrD,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,CAAC;QACF,CAAC,CAAA,CAAC,EAAE,CAAC;IACN,CAAC;IAED;;OAEG;IACO,UAAU,CAAC,OAAiB;QACrC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAED,0CAA0C;IAEhC,YAAY;QACrB,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAmB,aAAC,CAAC,UAAU,CAAC,CAAC;QACvE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACvB,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAES,gBAAgB;QACzB,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAwB,aAAC,CAAC,cAAc,CAAC,CAAC;QACvG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACxB,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;IAES,oBAAoB;QAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,yCAAmB,EAAE,CAAC;QAC/C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAwB,aAAC,CAAC,cAAc,EAAE,2CAAoB,CAAC,CAAC,WAAW,EAAE,CAAC;QACrG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAmB,aAAC,CAAC,UAAU,EAAE,qCAAmB,CAAC,CAAC,WAAW,EAAE,CAAC;IAC5F,CAAC;IAED;;OAEG;IACO,OAAO,CAAC,KAAU;QAC1B,0BAA0B;QAC3B,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,EAAE,GAAG,KAAK,GAAG,EAAE,CAAC,CAAC;QAC3D,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,sBAAsB;IAC3C,CAAC;IAED;;OAEG;IACO,UAAU;IACpB,CAAC;IAED;;;OAGG;IACO,SAAS;IACnB,CAAC;IAED;;OAEG;IACO,UAAU;IACpB,CAAC;IAED;;;OAGG;IACO,SAAS;IACnB,CAAC;IAEa,YAAY;;YACzB,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,EAC/B,YAAY,CAAC;YAEd,uEAAuE;YACvE,gBAAgB;YAChB,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;YAEpB,kCAAkC;YAClC,yDAAyD;YACzD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,KAAI,MAAM,MAAM,CAAC,KAAK,EAAE,CAAA,CAAC,CAAC,CAAC;gBAClD,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;YACtD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,MAAM,IAAI,8BAAiB,CAAC,8BAA8B,CAAC,CAAC;YAC7D,CAAC;YAED,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC;KAAA;IAEa,eAAe;;YAC5B,IAAI,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG;gBAC3C,6DAA6D;gBAC7D,wCAAwC;gBACxC,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;YACtB,CAAC,CAAC,CAAC;YACH,MAAM,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QACpC,CAAC;KAAA;IAEO,WAAW;QAClB,OAAO,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAC;QACrE,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,8DAA8D;IAC/E,CAAC;IAED;;;;OAIG;IACK,sBAAsB;QAC7B,IAAI,OAAO,GAAG;YACb,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YACtC,IAAI,CAAC,IAAI,EAAE,CAAC;QACb,CAAC,CAAC;QAEF,kCAAkC;QAClC,wFAAwF;QACxF,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAE9B,qCAAqC;QACrC,0FAA0F;QAC1F,kHAAkH;QAClH,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE/B,0DAA0D;QAC1D,0BAA0B;QAC1B,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC;YAClC,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;YACrC,IAAI,EAAE,GAAG,QAAQ,CAAC,eAAe,CAAC;gBACjC,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,MAAM,EAAE,OAAO,CAAC,MAAM;aACtB,CAAC,CAAC;YAEH,uBAAuB;YACvB,wEAAwE;YACxE,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE;gBACf,0BAA0B;gBAC1B,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACJ,CAAC;IACF,CAAC;CACD;AApMD,4CAoMC","file":"MicroServiceBase.js","sourcesContent":["import { IAdapter } from '../adapters/IAdapter';\r\nimport { IConfigurationAdapter, ConfigurationAdapter } from '../adapters/ConfigurationAdapter';\r\nimport { IDatabaseAdapter, KnexDatabaseAdapter } from '../adapters/DatabaseAdapter';\r\nimport { DependencyContainer } from '../utils/DependencyContainer';\r\nimport { CriticalException } from './Exceptions';\r\nimport { Types as T } from '../constants/Types';\r\n\r\n\r\nexport abstract class MicroServiceBase {\r\n\tprotected _configAdapter: IConfigurationAdapter;\r\n\tprotected _depContainer: DependencyContainer;\r\n\tprotected _adapters: IAdapter[];\r\n\tprotected _isStarted: boolean;\r\n\t\r\n\tconstructor() {\r\n\t\tthis._adapters = [];\r\n\t\tthis._isStarted = false;\r\n\t}\r\n\r\n\tpublic get isStarted(): boolean {\r\n\t\treturn this._isStarted;\r\n\t}\r\n\r\n\t/**\r\n\t * Bootstraps this service application.\r\n\t */\r\n\tpublic start(): void {\r\n\t\tthis.registerDependencies();\r\n\t\tthis.addConfigAdapter();\r\n\r\n\t\ttry {\r\n\t\t\t// A chance for derived class to add more adapters or do some customizations.\r\n\t\t\tthis.onStarting();\r\n\t\t} catch (ex) {\r\n\t\t\tthis.onError(ex);\r\n\t\t\tconsole.error('An error occured on starting, the application has to stop now.');\r\n\t\t\tthis.stop();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.initAdapters()\r\n\t\t\t.then(() => {\r\n\t\t\t\tthis._isStarted = true;\r\n\t\t\t\tthis.handleGracefulShutdown();\r\n\t\t\t\tthis.onStarted();\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tthis.onError(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Gracefully stops this application and exit \r\n\t */\r\n\tpublic stop(exitProcess: boolean = true): void {\r\n\t\t(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tthis.onStopping();\r\n\t\t\t\tthis._depContainer.dispose();\r\n\t\t\t\tawait this.disposeAdapters();\r\n\t\t\t\tthis._isStarted = false;\r\n\t\t\t\tthis.onStopped();\r\n\t\t\t} catch (ex) {\r\n\t\t\t\tthis.onError(ex);\r\n\t\t\t} finally {\r\n\t\t\t\texitProcess &&\r\n\t\t\t\t\t/* istanbul ignore next: only useful on production */ \r\n\t\t\t\t\tthis.exitProcess();\r\n\t\t\t}\r\n\t\t})();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return Total number of adapters that have been added so far.\r\n\t */\r\n\tprotected addAdapter(adapter: IAdapter): number {\r\n\t\treturn this._adapters.push(adapter);\r\n\t}\r\n\t\r\n\t// TODO: Should ha addAdapterFromContainer\r\n\r\n\tprotected addDbAdapter(): IDatabaseAdapter {\r\n\t\tlet dbAdt = this._depContainer.resolve<IDatabaseAdapter>(T.DB_ADAPTER);\r\n\t\tthis.addAdapter(dbAdt);\r\n\t\treturn dbAdt;\r\n\t}\r\n\r\n\tprotected addConfigAdapter(): IConfigurationAdapter {\r\n\t\tlet cfgAdt = this._configAdapter = this._depContainer.resolve<IConfigurationAdapter>(T.CONFIG_ADAPTER);\r\n\t\tthis.addAdapter(cfgAdt);\r\n\t\treturn cfgAdt;\r\n\t}\r\n\r\n\tprotected registerDependencies(): void {\r\n\t\tthis._depContainer = new DependencyContainer();\r\n\t\tthis._depContainer.bind<IConfigurationAdapter>(T.CONFIG_ADAPTER, ConfigurationAdapter).asSingleton();\r\n\t\tthis._depContainer.bind<IDatabaseAdapter>(T.DB_ADAPTER, KnexDatabaseAdapter).asSingleton();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Invoked whenever any error occurs in the application.\r\n\t */\r\n\tprotected onError(error: any): void {\r\n\t\t /* istanbul ignore next */\r\n\t\tlet msg = (error.toString ? error.toString() : error + '');\r\n\t\tconsole.error(msg); // Should log to file.\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked after registering dependencies, but before all other initializations.\r\n\t */\r\n\tprotected onStarting(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked after all initializations. At this stage, the application is considered\r\n\t * started successfully.\r\n\t */\r\n\tprotected onStarted(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when `stop` method is called, before any other actions take place.\r\n\t */\r\n\tprotected onStopping(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked after all finalizations have finished. At this stage, the application is \r\n\t * considered stopped successfully. The process will be killed after this.\r\n\t */\r\n\tprotected onStopped(): void {\r\n\t}\r\n\r\n\tprivate async initAdapters(): Promise<void> {\r\n\t\tlet cfgAdt = this._configAdapter,\r\n\t\t\tinitPromises;\r\n\r\n\t\t// Config adapter must be initialized first, because all other adapters\r\n\t\t// depend on it.\r\n\t\tawait cfgAdt.init();\r\n\r\n\t\t// If remote config is disabled or\r\n\t\t// if remote config is enanbed and fetching successfully.\r\n\t\tif (!cfgAdt.enableRemote || await cfgAdt.fetch()) {\r\n\t\t\tinitPromises = this._adapters.map(adt => adt.init());\r\n\t\t} else {\r\n\t\t\tthrow new CriticalException('Fail to fetch configuration!');\r\n\t\t}\r\n\r\n\t\tawait Promise.all(initPromises);\r\n\t}\r\n\r\n\tprivate async disposeAdapters(): Promise<void> {\r\n\t\tlet disposePromises = this._adapters.map(adt => {\r\n\t\t\t// let adtName = adt.constructor.toString().substring(0, 20);\r\n\t\t\t// console.log('DISPOSING: ' + adtName);\r\n\t\t\treturn adt.dispose(); \r\n\t\t});\r\n\t\tawait Promise.all(disposePromises);\r\n\t}\r\n\t\r\n\tprivate exitProcess() {\r\n\t\tconsole.log('Application has been shutdown, the process exits now!');\r\n\t\tprocess.exit(); // TODO: Should emit an exit code to also stop Docker instance\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gracefully shutdown the application when user presses Ctrl-C in Console/Terminal,\r\n\t * or when the OS is trying to stop the service process.\r\n\t * \r\n\t */\r\n\tprivate handleGracefulShutdown() {\r\n\t\tlet handler = () => {\r\n\t\t\tconsole.log('Gracefully shutdown...');\r\n\t\t\tthis.stop();\r\n\t\t};\r\n\r\n\t\t// SIGINT is the interrupt signal.\r\n\t\t// The Terminal/Console sends it to the foreground process when the user presses Ctrl-C.\r\n\t\tprocess.on('SIGINT', handler);\r\n\r\n\t\t// SIGTERM is the termination signal.\r\n\t\t// Sent by `kill` command, or Upstart, or Heroku dynos, or Docker to shutdown the process.\r\n\t\t// After a period (~10 sec), if the process is still running, SIGKILL will be sent to force immediate termination.\r\n\t\tprocess.on('SIGTERM', handler);\r\n\t\t\r\n\t\t// Windows has no such signals, so we need to fake SIGINT:\r\n\t\t/* istanbul ignore else */\r\n\t\tif (process.platform === 'win32') {\r\n\t\t\tconst readLine = require('readline');\r\n\t\t\tlet rl = readLine.createInterface({\r\n\t\t\t\tinput: process.stdin,\r\n\t\t\t\toutput: process.stdout\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// When pressing Ctrl-C\r\n\t\t\t// Read more: https://nodejs.org/api/readline.html#readline_event_sigint\r\n\t\t\trl.on('SIGINT', () => {\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tprocess.emit('SIGINT');\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}"]}