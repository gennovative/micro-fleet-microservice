{"version":3,"sources":["app/microservice/RepositoryBase.ts"],"names":[],"mappings":";;;;;;;;;AAEA,0CAAuC;AAEvC;IAEc,MAAM,CAAC,GAAY;;YAC/B,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC5C,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;KAAA;IAEY,MAAM,CAAC,EAAU;;YAC7B,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YACrD,MAAM,CAAC,YAAY,CAAC;QACrB,CAAC;KAAA;IAEY,IAAI,CAAC,EAAU;;YAC3B,IAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,QAAQ,CAAC;QACjB,CAAC;KAAA;IAEY,KAAK,CAAC,MAAwB;;YAC1C,aAAK,CAAC,aAAa,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;YAC5C,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,KAAK,CAAU,MAAM,CAAC,CAAC;YACpF,MAAM,CAAC,YAAY,CAAC;QACrB,CAAC;KAAA;IAEY,MAAM,CAAC,MAAe;;YAClC,aAAK,CAAC,aAAa,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;YAC5C,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC5E,MAAM,CAAC,YAAY,CAAC;QACrB,CAAC;KAAA;CAGD;AA9BD,wCA8BC","file":"RepositoryBase.js","sourcesContent":["import { QueryBuilder } from 'objection';\r\nimport { EntityBase } from './EntityBase';\r\nimport { Guard } from '../utils/Guard';\r\n\r\nexport abstract class RepositoryBase<TEntity extends EntityBase> {\r\n\r\n\tpublic async create(ent: TEntity): Promise<TEntity> {\r\n\t\tlet newEnt = await this.query().insert(ent);\r\n\t\treturn newEnt;\r\n\t}\r\n\r\n\tpublic async delete(id: number): Promise<number> {\r\n\t\tlet affectedRows = await this.query().deleteById(id);\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\tpublic async find(id: number): Promise<TEntity> {\r\n\t\tlet foundEnt = await this.query().findById(id);\r\n\t\treturn foundEnt;\r\n\t}\r\n\r\n\tpublic async patch(entity: Partial<TEntity>): Promise<number> {\r\n\t\tGuard.assertDefined('entity.id', entity.id);\r\n\t\tlet affectedRows = await this.query().where('id', entity.id).patch(<TEntity>entity);\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\tpublic async update(entity: TEntity): Promise<number> {\r\n\t\tGuard.assertDefined('entity.id', entity.id);\r\n\t\tlet affectedRows = await this.query().where('id', entity.id).update(entity);\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\tpublic abstract query(): QueryBuilder<TEntity>;\r\n}"]}