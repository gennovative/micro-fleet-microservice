{"version":3,"sources":["app/rpc/DirectRpcHandler.ts"],"names":[],"mappings":"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","file":"DirectRpcHandler.js","sourcesContent":["import * as express from 'express';\r\nimport * as bodyParser from 'body-parser';\r\n\r\nimport { injectable, inject, IDependencyContainer, Guard, Exception } from 'back-lib-common-util';\r\n\r\nimport { Types as T } from '../constants/Types';\r\nimport {  } from '../utils/DependencyContainer';\r\nimport * as rpc from './RpcCommon';\r\n\r\nexport interface IDirectRpcHandler extends rpc.IRpcHandler {\r\n}\r\n\r\n@injectable()\r\nexport class ExpressRpcHandler\r\n\t\t\textends rpc.RpcHandlerBase\r\n\t\t\timplements IDirectRpcHandler {\r\n\r\n\tprivate static URL_TESTER: RegExp = (function() {\r\n\t\t\tlet regexp = new RegExp(/^[a-zA-Z0-9_-]*$/);\r\n\t\t\tregexp.compile();\r\n\t\t\treturn regexp;\r\n\t\t})();\r\n\r\n\tprivate _app: express.Express;\r\n\tprivate _router: express.Router;\r\n\r\n\r\n\tconstructor(\r\n\t\t@inject(T.DEPENDENCY_CONTAINER) depContainer: IDependencyContainer\r\n\t) {\r\n\t\tsuper(depContainer);\r\n\t}\r\n\r\n\r\n\tpublic init(param?: any): void {\r\n\t\tGuard.assertIsFalsey(this._router, 'This RPC Caller is already initialized!');\r\n\t\tGuard.assertIsTruthy(this._name, '`name` property must be set!');\r\n\t\tGuard.assertDefined('param', param);\r\n\t\tGuard.assertIsTruthy(param.expressApp, '`expressApp` with an instance of Express is required!');\r\n\t\tGuard.assertIsTruthy(param.router, '`router` with an instance of Express Router is required!');\r\n\r\n\t\tlet app: express.Express = this._app = param.expressApp;\r\n\t\t\r\n\t\tthis._router = param.router;\r\n\t\t//app.use(bodyParser.urlencoded({extended: true})); // Parse Form values in POST request, but I don't think we need it in this case.\r\n\t\tapp.use(bodyParser.json()); // Parse JSON in POST request\r\n\t\tapp.use(`/${this._name}`, this._router);\r\n\t}\r\n\r\n\tpublic handle(action: string, dependencyIdentifier: string | symbol, actionFactory?: rpc.RpcActionFactory) {\r\n\t\tGuard.assertIsMatch(null, ExpressRpcHandler.URL_TESTER, action, `Route \"${action}\" is not URL-safe!`);\r\n\t\tGuard.assertIsTruthy(this._router, '`init` method must be called first!');\r\n\r\n\t\tthis._router.post(`/${action}`, this.buildHandleFunc.apply(this, arguments));\r\n\t}\r\n\r\n\r\n\tprivate buildHandleFunc(action: string, dependencyIdentifier: string | symbol, actionFactory?: rpc.RpcActionFactory): express.RequestHandler {\r\n\t\treturn (req: express.Request, res: express.Response) => {\r\n\t\t\tlet request: rpc.IRpcRequest = req.body;\r\n\r\n\t\t\t(new Promise((resolve, reject) => {\r\n\t\t\t\tlet actionFn = this.resolveActionFunc(action, dependencyIdentifier, actionFactory);\r\n\t\t\t\t// Execute controller's action\r\n\t\t\t\tactionFn(request, resolve, reject);\r\n\t\t\t}))\r\n\t\t\t.then(result => {\r\n\t\t\t\tres.status(200).send(this.createResponse(true, result, request.from));\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tlet errMsg = error,\r\n\t\t\t\t\tstatusCode = 200;\r\n\r\n\t\t\t\t// If error is an uncaught Exception object, that means the action method\r\n\t\t\t\t// has a problem. We should response with error status code.\r\n\t\t\t\tif (error instanceof Exception) {\r\n\t\t\t\t\t// TODO: Should log this unexpected error.\r\n\t\t\t\t\tstatusCode = 500;\r\n\t\t\t\t\terrMsg = error.message;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If this is a reject error, which means the action method sends this error\r\n\t\t\t\t// back to caller on purpose.\r\n\t\t\t\tres.status(statusCode).send(this.createResponse(false, errMsg, request.from));\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n}"]}