{"version":3,"sources":["app/rpc/DirectRpcHandler.ts"],"names":[],"mappings":"AAAA,mDAAmD;;;;;;;;;;;;;;AAEnD,iDAAiD;AACjD,sDAAsD;AACtD,mCAAmC;AACnC,0CAAuC;AACvC,8CAAgD;AAChD,sEAAwF;AACxF,mCAAmC;AAOnC,IAAa,iBAAiB,GAA9B,uBACG,SAAQ,GAAG,CAAC,cAAc;IAgB5B,YACiC,YAAkC;QAElE,KAAK,CAAC,YAAY,CAAC,CAAC;QAhBJ,aAAQ,GAAW,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAiBjE,CAAC;IAZD,IAAW,OAAO,CAAC,GAAoB;QACtC,aAAK,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,0CAA0C,CAAC,CAAC;QAE/E,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;QACpB,IAAI,CAAC,UAAU,EAAE,CAAC;IACnB,CAAC;IAUM,MAAM,CAAC,MAAc,EAAE,oBAAqC,EAAE,aAAoC;QACxG,aAAK,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,UAAU,MAAM,oBAAoB,CAAC,CAAC;QACvF,aAAK,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC;QAE1D,IAAI,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,oBAAoB,EAAE,aAAa,CAAC,CAAC;QACnF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,MAAM,EAAE,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjE,CAAC;IAGO,UAAU;QACjB,aAAK,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,0CAA0C,CAAC,CAAC;QAE7E,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACnD,CAAC;IAEO,eAAe,CAAC,QAAmC;QAC1D,MAAM,CAAC,CAAC,GAAoB,EAAE,GAAqB;YAClD,IAAI,OAAO,GAAoB,GAAG,CAAC,IAAI,CAAC;YAExC,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;gBAC5B,8BAA8B;gBAC9B,QAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;iBACF,IAAI,CAAC,MAAM;gBACX,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAChE,CAAC,CAAC;iBACD,KAAK,CAAC,KAAK;gBACX,IAAI,MAAM,GAAG,KAAK,EACjB,UAAU,GAAG,GAAG,CAAC;gBAElB,yEAAyE;gBACzE,4DAA4D;gBAC5D,EAAE,CAAC,CAAC,KAAK,YAAY,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;oBACnC,0CAA0C;oBAC1C,UAAU,GAAG,GAAG,CAAC;oBACjB,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC;gBACxB,CAAC;gBAED,4EAA4E;gBAC5E,6BAA6B;gBAC7B,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YACxE,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC;IACH,CAAC;CACD,CAAA;AArEY,iBAAiB;IAD7B,gCAAU,EAAE;IAmBV,WAAA,4BAAM,CAAC,aAAC,CAAC,oBAAoB,CAAC,CAAA;;GAlBpB,iBAAiB,CAqE7B;AArEY,8CAAiB","file":"DirectRpcHandler.js","sourcesContent":["/// <reference types=\"express-serve-static-core\" />\r\n\r\nimport * as ex from '../microservice/Exceptions';\r\n//import * as exCore from 'express-serve-static-core';\r\nimport * as express from 'express';\r\nimport { Guard } from '../utils/Guard';\r\nimport { Types as T } from '../constants/Types';\r\nimport { injectable, inject, IDependencyContainer } from '../utils/DependencyContainer';\r\nimport * as rpc from './RpcCommon';\r\n\r\nexport interface IDirectRpcHandler extends rpc.IRpcHandler {\r\n\texpress: express.Express;\r\n}\r\n\r\n@injectable()\r\nexport class ExpressRpcHandler\r\n\t\t\textends rpc.RpcHandlerBase\r\n\t\t\timplements IDirectRpcHandler {\r\n\r\n\tprivate readonly _urlSafe: RegExp = /^[a-zA-Z0-9_-]*$/.compile();\r\n\tprivate _router: express.Router;\r\n\tprivate _express: express.Express;\r\n\r\n\r\n\tpublic set express(val: express.Express) {\r\n\t\tGuard.assertIsFalsey(this._router, 'Another Express instance is already set.');\r\n\r\n\t\tthis._express = val;\r\n\t\tthis.initRouter();\r\n\t}\r\n\r\n\r\n\tconstructor(\r\n\t\t@inject(T.DEPENDENCY_CONTAINER) depContainer: IDependencyContainer\r\n\t) {\r\n\t\tsuper(depContainer);\r\n\t}\r\n\r\n\r\n\tpublic handle(action: string, dependencyIdentifier: string | symbol, actionFactory?: rpc.RpcActionFactory) {\r\n\t\tGuard.assertIsMatch(null, this._urlSafe, action, `Route \"${action}\" is not URL-safe!`);\r\n\t\tGuard.assertIsTruthy(this._router, 'Router must be set!');\r\n\r\n\t\tlet actionFn = this.resolveActionFunc(action, dependencyIdentifier, actionFactory);\r\n\t\tthis._router.post(`/${action}`, this.buildHandleFunc(actionFn));\r\n\t}\r\n\r\n\r\n\tprivate initRouter() {\r\n\t\tGuard.assertIsTruthy(this._name, 'Name must be set before setting Express.');\r\n\t\t\r\n\t\tthis._router = express.Router();\r\n\t\tthis._express.use(`/${this._name}`, this._router);\r\n\t}\r\n\r\n\tprivate buildHandleFunc(actionFn: rpc.RpcControllerFunction): express.RequestHandler {\r\n\t\treturn (req: express.Request, res: express.Response) => {\r\n\t\t\tlet request: rpc.IRpcRequest = req.body;\r\n\r\n\t\t\t(new Promise((resolve, reject) => {\r\n\t\t\t\t// Execute controller's action\r\n\t\t\t\tactionFn(request, resolve, reject);\r\n\t\t\t}))\r\n\t\t\t.then(result => {\r\n\t\t\t\tres.send(200, this.createResponse(true, result, request.from));\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tlet errMsg = error,\r\n\t\t\t\t\tstatusCode = 200;\r\n\r\n\t\t\t\t// If error is an uncaught Exception object, that means the action method\r\n\t\t\t\t// has a problem. We should response with error status code.\r\n\t\t\t\tif (error instanceof ex.Exception) {\r\n\t\t\t\t\t// TODO: Should log this unexpected error.\r\n\t\t\t\t\tstatusCode = 500;\r\n\t\t\t\t\terrMsg = error.message;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If this is a custom error, which means the action method sends this error\r\n\t\t\t\t// back to caller on purpose.\r\n\t\t\t\tres.send(statusCode, this.createResponse(false, errMsg, request.from));\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n}"]}