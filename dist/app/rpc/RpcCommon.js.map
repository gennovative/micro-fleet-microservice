{"version":3,"sources":["app/rpc/RpcCommon.ts"],"names":[],"mappings":";;;;;;;;;;AAGA,0CAAuC;AACvC,sEAAgF;AAgEhF,mBAAmB;AAGnB,IAAsB,aAAa,GAAnC;IAIC,IAAW,IAAI;QACd,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,IAAW,IAAI,CAAC,GAAW;QAC1B,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;IAClB,CAAC;CACD,CAAA;AAXqB,aAAa;IADlC,gCAAU,EAAE;GACS,aAAa,CAWlC;AAXqB,sCAAa;AAcnC,IAAsB,cAAc,GAApC;IAYC,YAAsB,aAAmC;QAAnC,kBAAa,GAAb,aAAa,CAAsB;IACzD,CAAC;IATD,IAAW,IAAI;QACd,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,IAAW,IAAI,CAAC,GAAW;QAC1B,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;IAClB,CAAC;IAMS,iBAAiB,CAAC,MAAc,EAAE,KAAsB,EAAE,UAA6B;QAChG,yCAAyC;QACzC,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAM,KAAK,CAAC,CAAC;QACtD,aAAK,CAAC,cAAc,CAAC,QAAQ,EAAE,6BAA6B,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAEjF,IAAI,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;QAEhC,0EAA0E;QAC1E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACf,QAAQ,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;QACvD,CAAC;QAED,aAAK,CAAC,cAAc,CAAC,QAAQ,EAAE,gDAAgD,CAAC,CAAC;QAEjF,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAES,cAAc,CAAC,SAAS,EAAE,IAAI,EAAE,OAAe;QACxD,MAAM,CAAC;YACN,SAAS;YACT,IAAI,EAAE,IAAI,CAAC,KAAK;YAChB,EAAE,EAAE,OAAO;YACX,IAAI;SACJ,CAAC;IACH,CAAC;CACD,CAAA;AAzCqB,cAAc;IADnC,gCAAU,EAAE;;GACS,cAAc,CAyCnC;AAzCqB,wCAAc","file":"RpcCommon.js","sourcesContent":["import * as express from 'express-serve-static-core';\r\nimport { CriticalException } from '../microservice/Exceptions';\r\nimport { IMessage } from '../adapters/MessageBrokerAdapter';\r\nimport { Guard } from '../utils/Guard';\r\nimport { injectable, IDependencyContainer } from '../utils/DependencyContainer';\r\n\r\n// Interface - Service contract\r\n\r\nexport interface IRpcRequest {\r\n\tfrom: string;\r\n\tto: string;\r\n\tparams: any;\r\n}\r\n\r\nexport interface IRpcResponse {\r\n\tisSuccess: boolean;\r\n\tfrom: string;\r\n\tto: string;\r\n\tdata: any;\r\n}\r\n\r\n// Interface - RPC caller and handler\r\n\r\nexport interface IRpcCaller {\r\n\t/**\r\n\t * A name used in \"from\" and \"to\" request property.\r\n\t */\r\n\tname: string;\r\n\r\n\t/**\r\n\t * Listens to `route`, resolves an instance with `dependencyIdentifier`\r\n\t * when there is a request coming, calls instance's `action` method. If `actions`\r\n\t * is not specified, RPC Caller tries to figure out an action method from `route`.\r\n\t */\r\n\tcall(moduleName: string, action: string, params: any): Promise<IRpcResponse>;\r\n\r\n\t/**\r\n\t * Sets up this RPC caller with specified `param`. Each implementation class requires\r\n\t * different kinds of `param`.\r\n\t */\r\n\tinit(param: any);\r\n}\r\n\r\n\r\nexport type RpcControllerFunction = (request: IRpcRequest, resolve: PromiseResolveFn, reject: PromiseRejectFn) => void;\r\nexport type RpcActionFactory = (controller) => RpcControllerFunction;\r\n\r\nexport interface IRpcHandler {\r\n\t/**\r\n\t * A name used in \"from\" and \"to\" request property.\r\n\t */\r\n\tname: string;\r\n\r\n\t/**\r\n\t * Waits for incoming request, resolves an instance with `dependencyIdentifier`,\r\n\t * calls instance's `action` method. If `customAction` is specified, \r\n\t * calls instance's `customAction` instead.\r\n\t */\r\n\thandle(action: string, dependencyIdentifier: string | symbol, actionFactory?: RpcActionFactory);\r\n\t\r\n\t/**\r\n\t * Sets up this RPC handler with specified `param`. Each implementation class requires\r\n\t * different kinds of `param`.\r\n\t */\r\n\tinit(param: any): void;\r\n}\r\n\r\n\r\n// RPC Base classes\r\n\r\n@injectable()\r\nexport abstract class RpcCallerBase {\r\n\r\n\tprotected _name: string;\r\n\r\n\tpublic get name(): string {\r\n\t\treturn this._name;\r\n\t}\r\n\r\n\tpublic set name(val: string) {\r\n\t\tthis._name = val;\r\n\t}\r\n}\r\n\r\n@injectable()\r\nexport abstract class RpcHandlerBase {\r\n\r\n\tprotected _name: string;\r\n\r\n\tpublic get name(): string {\r\n\t\treturn this._name;\r\n\t}\r\n\r\n\tpublic set name(val: string) {\r\n\t\tthis._name = val;\r\n\t}\r\n\r\n\tconstructor(protected _depContainer: IDependencyContainer) {\r\n\t}\r\n\t\r\n\r\n\tprotected resolveActionFunc(action: string, depId: string | symbol, actFactory?: RpcActionFactory): RpcControllerFunction {\r\n\t\t// Attempt to resolve controller instance\r\n\t\tlet instance = this._depContainer.resolve<any>(depId);\r\n\t\tGuard.assertIsTruthy(instance, `Cannot resolve dependency ${depId.toString()}!`);\r\n\r\n\t\tlet actionFn = instance[action];\r\n\t\t\r\n\t\t// If default action is not available, attempt to get action from factory.\r\n\t\tif (!actionFn) {\r\n\t\t\tactionFn = (actFactory ? actFactory(instance) : null);\r\n\t\t}\r\n\r\n\t\tGuard.assertIsTruthy(actionFn, 'Specified action does not exist in controller!');\r\n\r\n\t\treturn actionFn.bind(instance);\r\n\t}\r\n\r\n\tprotected createResponse(isSuccess, data, replyTo: string): IRpcResponse {\r\n\t\treturn {\r\n\t\t\tisSuccess,\r\n\t\t\tfrom: this._name,\r\n\t\t\tto: replyTo,\r\n\t\t\tdata\r\n\t\t};\r\n\t}\r\n}\r\n"]}