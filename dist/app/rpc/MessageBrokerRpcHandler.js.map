{"version":3,"sources":["app/rpc/MessageBrokerRpcHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,iDAAiD;AACjD,0CAAuC;AACvC,8CAAgD;AAChD,sEAAwF;AAExF,mCAAmC;AAOnC,IAAa,uBAAuB,GAApC,6BACG,SAAQ,GAAG,CAAC,cAAc;IAG5B,YACiC,YAAkC,EAChC,aAAoC;QAEtE,KAAK,CAAC,YAAY,CAAC,CAAC;QAFc,kBAAa,GAAb,aAAa,CAAuB;IAGvE,CAAC;IAGM,IAAI,CAAC,KAAU;IACtB,CAAC;IAEM,MAAM,CAAC,MAAc,EAAE,oBAAqC,EAAE,aAAoC;QACxG,aAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACtC,aAAK,CAAC,aAAa,CAAC,sBAAsB,EAAE,oBAAoB,CAAC,CAAC;QAElE,IAAI,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,oBAAoB,EAAE,aAAa,CAAC,CAAC;QAEnF,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,WAAW,IAAI,CAAC,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjG,CAAC;IAGO,eAAe,CAAC,QAAmC;QAC1D,MAAM,CAAC,CAAC,GAAa,EAAE,GAAe,EAAE,IAAgB;YACvD,IAAI,OAAO,GAAoB,GAAG,CAAC,IAAI,EACtC,UAAU,GAAW,GAAG,CAAC,UAAU,CAAC,UAAU,EAC9C,aAAa,GAAG,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC;YAE9C,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;gBAC5B,8BAA8B;gBAC9B,QAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;iBACF,IAAI,CAAC,MAAM;gBACX,gCAAgC;gBAChC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC;YACnH,CAAC,CAAC;iBACD,IAAI,CAAC,GAAG,CAAC,CAAC,2GAA2G;iBACrH,KAAK,CAAC,KAAK;gBACX,yEAAyE;gBACzE,6FAA6F;gBAC7F,EAAE,CAAC,CAAC,KAAK,YAAY,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;oBACnC,0CAA0C;oBAC1C,IAAI,EAAE,CAAC;gBACR,CAAC;gBAED,4EAA4E;gBAC5E,6BAA6B;gBAC7B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC;YACnH,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC;IACH,CAAC;CACD,CAAA;AAtDY,uBAAuB;IADnC,gCAAU,EAAE;IAMV,WAAA,4BAAM,CAAC,aAAC,CAAC,oBAAoB,CAAC,CAAA;IAC9B,WAAA,4BAAM,CAAC,aAAC,CAAC,cAAc,CAAC,CAAA;;GANd,uBAAuB,CAsDnC;AAtDY,0DAAuB","file":"MessageBrokerRpcHandler.js","sourcesContent":["import * as ex from '../microservice/Exceptions';\r\nimport { Guard } from '../utils/Guard';\r\nimport { Types as T } from '../constants/Types';\r\nimport { injectable, inject, IDependencyContainer } from '../utils/DependencyContainer';\r\nimport { IMessageBrokerAdapter, MessageHandleFunction, IMessage } from '../adapters/MessageBrokerAdapter';\r\nimport * as rpc from './RpcCommon';\r\n\r\n\r\nexport interface IMediateRpcHandler extends rpc.IRpcHandler {\r\n}\r\n\r\n@injectable()\r\nexport class MessageBrokerRpcHandler\r\n\t\t\textends rpc.RpcHandlerBase\r\n\t\t\timplements IMediateRpcHandler {\r\n\t\r\n\tconstructor(\r\n\t\t@inject(T.DEPENDENCY_CONTAINER) depContainer: IDependencyContainer,\r\n\t\t@inject(T.BROKER_ADAPTER) private _msgBrokerAdt: IMessageBrokerAdapter\r\n\t) {\r\n\t\tsuper(depContainer);\r\n\t}\r\n\r\n\r\n\tpublic init(param: any): void {\r\n\t}\r\n\r\n\tpublic handle(action: string, dependencyIdentifier: string | symbol, actionFactory?: rpc.RpcActionFactory) {\r\n\t\tGuard.assertDefined('action', action);\r\n\t\tGuard.assertDefined('dependencyIdentifier', dependencyIdentifier);\r\n\r\n\t\tlet actionFn = this.resolveActionFunc(action, dependencyIdentifier, actionFactory);\r\n\t\t\r\n\t\tthis._msgBrokerAdt.subscribe(`request.${this._name}.${action}`, this.buildHandleFunc(actionFn));\r\n\t}\r\n\r\n\r\n\tprivate buildHandleFunc(actionFn: rpc.RpcControllerFunction): MessageHandleFunction {\r\n\t\treturn (msg: IMessage, ack: () => void, nack: () => void) => {\r\n\t\t\tlet request: rpc.IRpcRequest = msg.data,\r\n\t\t\t\treplyTopic: string = msg.properties.replyTopic,\r\n\t\t\t\tcorrelationId = msg.properties.correlationId;\r\n\t\t\t\r\n\t\t\t(new Promise((resolve, reject) => {\r\n\t\t\t\t// Execute controller's action\r\n\t\t\t\tactionFn(request, resolve, reject);\r\n\t\t\t}))\r\n\t\t\t.then(result => { // When `actionFn` calls `resolve` from inside.\r\n\t\t\t\t// Sends response to reply topic\r\n\t\t\t\treturn this._msgBrokerAdt.publish(replyTopic, this.createResponse(true, result, request.from), { correlationId });\r\n\t\t\t})\r\n\t\t\t.then(ack) // Only ack when the response has been sent, which means message broker can remove this message from queue.\r\n\t\t\t.catch(error => {\r\n\t\t\t\t// If error is an uncaught Exception object, that means the action method\r\n\t\t\t\t// has a problem. We should nack to tell message broker to send this message to someone else.\r\n\t\t\t\tif (error instanceof ex.Exception) {\r\n\t\t\t\t\t// TODO: Should log this unexpected error.\r\n\t\t\t\t\tnack();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If this is a custom error, which means the action method sends this error\r\n\t\t\t\t// back to caller on purpose.\r\n\t\t\t\treturn this._msgBrokerAdt.publish(replyTopic, this.createResponse(false, error, request.from), { correlationId });\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n}"]}