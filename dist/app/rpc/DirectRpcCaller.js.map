{"version":3,"sources":["app/rpc/DirectRpcCaller.ts"],"names":[],"mappings":";;;;;;;;;;;AAGA,2CAA2C;AAE3C,+DAAuF;AAIvF,mCAAmC;AAanC,IAAa,aAAa,GAA1B,mBACG,SAAQ,GAAG,CAAC,aAAa;IAM3B;QACC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;IAC9B,CAAC;IAED,IAAW,WAAW;QACrB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC1B,CAAC;IAED,IAAW,WAAW,CAAC,GAAW;QACjC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;IACzB,CAAC;IAEM,IAAI,CAAC,KAAU;IACtB,CAAC;IAEM,IAAI,CAAC,UAAkB,EAAE,MAAc,EAAE,MAAW;QAC1D,4BAAK,CAAC,aAAa,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;QAC9C,4BAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACtC,4BAAK,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,EAAE,uBAAuB,CAAC,CAAC;QAEjE,MAAM,CAAC,IAAI,OAAO,CAAmB,CAAC,OAAO,EAAE,MAAM;YACpD,IAAI,OAAO,GAAoB;gBAC9B,IAAI,EAAE,IAAI,CAAC,KAAK;gBAChB,EAAE,EAAE,UAAU;gBACd,MAAM;aACN,EACA,OAAO,GAAG;gBACV,MAAM,EAAE,MAAM;gBACd,GAAG,EAAE,UAAU,IAAI,CAAC,YAAY,IAAI,UAAU,IAAI,MAAM,EAAE;gBAC1D,IAAI,EAAE,OAAO;gBACb,IAAI,EAAE,IAAI,CAAC,6CAA6C;aACxD,CAAC;YAEF,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;iBAChC,KAAK,CAAC,WAAW;gBACjB,MAAM,CAAmB,WAAW,CAAC,KAAK,CAAC;YAC5C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACJ,CAAC;CACD,CAAA;AA/CY,aAAa;IADzB,iCAAU,EAAE;;GACA,aAAa,CA+CzB;AA/CY,sCAAa","file":"DirectRpcCaller.js","sourcesContent":["import { EventEmitter } from 'events';\r\n\r\nimport * as uuid from 'uuid';\r\nimport * as request from 'request-promise';\r\n\r\nimport { injectable, inject, IDependencyContainer, Guard } from 'back-lib-common-util';\r\n\r\nimport { Types as T } from '../constants/Types';\r\nimport { IMessageBrokerAdapter, MessageHandleFunction, IMessage } from '../adapters/MessageBrokerAdapter';\r\nimport * as rpc from './RpcCommon';\r\n\r\n\r\nexport interface IDirectRpcCaller extends rpc.IRpcCaller {\r\n\t/**\r\n\t * IP address or host name including port number.\r\n\t * Do not include protocol (http, ftp...) because different class implementations\r\n\t * will prepend different protocols.\r\n\t */\r\n\tbaseAddress: string;\r\n}\r\n\r\n@injectable()\r\nexport class HttpRpcCaller\r\n\t\t\textends rpc.RpcCallerBase\r\n\t\t\timplements IDirectRpcCaller {\r\n\r\n\tprivate _baseAddress: string;\r\n\tprivate _requestMaker: (options) => Promise<any>;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._requestMaker = request;\r\n\t}\r\n\r\n\tpublic get baseAddress(): string {\r\n\t\treturn this._baseAddress;\r\n\t}\r\n\r\n\tpublic set baseAddress(val: string) {\r\n\t\tthis._baseAddress = val;\r\n\t}\r\n\r\n\tpublic init(param: any): void {\r\n\t}\r\n\r\n\tpublic call(moduleName: string, action: string, params: any): Promise<rpc.IRpcResponse> {\r\n\t\tGuard.assertDefined('moduleName', moduleName);\r\n\t\tGuard.assertDefined('action', action);\r\n\t\tGuard.assertIsTruthy(this._baseAddress, 'Base URL must be set!');\r\n\r\n\t\treturn new Promise<rpc.IRpcResponse>((resolve, reject) => {\r\n\t\t\tlet request: rpc.IRpcRequest = {\r\n\t\t\t\tfrom: this._name,\r\n\t\t\t\tto: moduleName,\r\n\t\t\t\tparams\r\n\t\t\t},\r\n\t\t\t\toptions = {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\turi: `http://${this._baseAddress}/${moduleName}/${action}`,\r\n\t\t\t\tbody: request,\r\n\t\t\t\tjson: true // Automatically stringifies the body to JSON\r\n\t\t\t};\r\n\r\n\t\t\treturn this._requestMaker(options)\r\n\t\t\t\t.catch(rawResponse => {\r\n\t\t\t\t\treturn <rpc.IRpcResponse>rawResponse.error;\r\n\t\t\t\t});\r\n\t\t});\r\n\t}\r\n}"]}