{"version":3,"sources":["app/rpc/HttpRpcHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,iDAAiD;AAEjD,0CAAuC;AACvC,8CAAgD;AAChD,sEAAwF;AACxF,qDAAwG;AAQxG,IAAa,iBAAiB,GAA9B,uBACG,SAAQ,+BAAc;IAcxB,YACiC,YAAkC;QAElE,KAAK,CAAC,YAAY,CAAC,CAAC;QAdJ,aAAQ,GAAW,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAejE,CAAC;IAZD,IAAW,MAAM;QAChB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAED,IAAW,MAAM,CAAC,GAAoB;QACrC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;IACpB,CAAC;IASM,MAAM,CAAC,MAAc,EAAE,oBAAqC,EAAE,aAAgC;QACpG,aAAK,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,UAAU,MAAM,oBAAoB,CAAC,CAAC;QACvF,aAAK,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC;QAE1D,IAAI,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,oBAAoB,EAAE,aAAa,CAAC,CAAC;QACnF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,MAAM,EAAE,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjE,CAAC;IAEO,eAAe,CAAC,QAA+B;QACtD,MAAM,CAAC,CAAC,GAAoB,EAAE,GAAqB;YAClD,IAAI,OAAO,GAAgB;gBAC1B,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI;gBACnB,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE;gBACf,KAAK,EAAE,GAAG,CAAC,IAAI;aACf,CAAC;YAEF,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;gBAC5B,8BAA8B;gBAC9B,QAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;iBACF,IAAI,CAAC,MAAM;gBACX,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAChE,CAAC,CAAC;iBACD,KAAK,CAAC,KAAK;gBACX,IAAI,MAAM,GAAG,KAAK,EACjB,UAAU,GAAG,GAAG,CAAC;gBAElB,yEAAyE;gBACzE,4DAA4D;gBAC5D,EAAE,CAAC,CAAC,KAAK,YAAY,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;oBACnC,0CAA0C;oBAC1C,UAAU,GAAG,GAAG,CAAC;oBACjB,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC;gBACxB,CAAC;gBAED,4EAA4E;gBAC5E,6BAA6B;gBAC7B,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YACxE,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC;IACH,CAAC;CACD,CAAA;AA/DY,iBAAiB;IAD7B,gCAAU,EAAE;IAiBV,WAAA,4BAAM,CAAC,aAAC,CAAC,oBAAoB,CAAC,CAAA;;GAhBpB,iBAAiB,CA+D7B;AA/DY,8CAAiB","file":"HttpRpcHandler.js","sourcesContent":["import * as ex from '../microservice/Exceptions';\r\nimport * as express from 'express-serve-static-core';\r\nimport { Guard } from '../utils/Guard';\r\nimport { Types as T } from '../constants/Types';\r\nimport { injectable, inject, IDependencyContainer } from '../utils/DependencyContainer';\r\nimport { RpcHandlerBase, IRpcHandler, RpcActionFactory, RpcControllerFunction } from './RpcHandlerBase';\r\nimport { IRpcRequest } from './RpcModels';\r\n\r\nexport interface IHttpRpcHandler extends IRpcHandler {\r\n\trouter: express.IRouter;\r\n}\r\n\r\n@injectable()\r\nexport class ExpressRpcHandler\r\n\t\t\textends RpcHandlerBase\r\n\t\t\timplements IHttpRpcHandler {\r\n\r\n\tprivate readonly _urlSafe: RegExp = /^[a-zA-Z0-9_-]*$/.compile();\r\n\tprivate _router: express.IRouter;\r\n\r\n\tpublic get router(): express.IRouter {\r\n\t\treturn this._router;\r\n\t}\r\n\r\n\tpublic set router(val: express.IRouter) {\r\n\t\tthis._router = val;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\t@inject(T.DEPENDENCY_CONTAINER) depContainer: IDependencyContainer\r\n\t) {\r\n\t\tsuper(depContainer);\r\n\t}\r\n\r\n\r\n\tpublic handle(action: string, dependencyIdentifier: string | symbol, actionFactory?: RpcActionFactory) {\r\n\t\tGuard.assertIsMatch(null, this._urlSafe, action, `Route \"${action}\" is not URL-safe!`);\r\n\t\tGuard.assertIsTruthy(this._router, 'Router must be set!');\r\n\r\n\t\tlet actionFn = this.resolveActionFunc(action, dependencyIdentifier, actionFactory);\r\n\t\tthis._router.post(`/${action}`, this.buildHandleFunc(actionFn));\r\n\t}\r\n\r\n\tprivate buildHandleFunc(actionFn: RpcControllerFunction): express.RequestHandler {\r\n\t\treturn (req: express.Request, res: express.Response) => {\r\n\t\t\tlet request: IRpcRequest = {\r\n\t\t\t\tfrom: req.body.from,\r\n\t\t\t\tto: req.body.to,\r\n\t\t\t\tparam: req.body\r\n\t\t\t};\r\n\r\n\t\t\t(new Promise((resolve, reject) => {\r\n\t\t\t\t// Execute controller's action\r\n\t\t\t\tactionFn(request, resolve, reject);\r\n\t\t\t}))\r\n\t\t\t.then(result => {\r\n\t\t\t\tres.send(200, this.createResponse(true, result, request.from));\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tlet errMsg = error,\r\n\t\t\t\t\tstatusCode = 200;\r\n\r\n\t\t\t\t// If error is an uncaught Exception object, that means the action method\r\n\t\t\t\t// has a problem. We should response with error status code.\r\n\t\t\t\tif (error instanceof ex.Exception) {\r\n\t\t\t\t\t// TODO: Should log this unexpected error.\r\n\t\t\t\t\tstatusCode = 500;\r\n\t\t\t\t\terrMsg = error.message;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If this is a custom error, which means the action method sends this error\r\n\t\t\t\t// back to caller on purpose.\r\n\t\t\t\tres.send(statusCode, this.createResponse(false, errMsg, request.from));\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n}"]}